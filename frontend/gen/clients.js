// Code generated by oto; DO NOT EDIT.

'use strict';

async function doFetch(request, serviceName, methodName) {
		const headers = {
			'Accept': 'application/json',
			'Content-Type': 'application/json',
		}
		request = request || {}
		const response = await fetch(`${(window.baseUrl || '')}/oto/${serviceName}.${methodName}`, {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(request)
		})
		const json = await response.json();
		if(json.error) return [json.error, false];
		if(response.status <= 199 || response.status >= 300) return [response, false];
		return [json, true];
}

 
// NamespaceService allows you to programmatically manage namespaces
export class NamespaceService {
	
	// DeletetNamespace deletes a Namespace
	async deleteNamespace(request) {
    return doFetch(request,"NamespaceService","DeleteNamespace")
	}
	
	// GetNamespace gets a Namespace
	async getNamespace(request) {
    return doFetch(request,"NamespaceService","GetNamespace")
	}
	
	// PutNamespace stores a Namespace
	async putNamespace(request) {
    return doFetch(request,"NamespaceService","PutNamespace")
	}
	
	// Search returns a filtered list of Namespaces
	async search(request) {
    return doFetch(request,"NamespaceService","Search")
	}
	
}


const api = {}


api["NamespaceService.DeleteNamespace"] = new NamespaceService().deleteNamespace

api["NamespaceService.GetNamespace"] = new NamespaceService().getNamespace

api["NamespaceService.PutNamespace"] = new NamespaceService().putNamespace

api["NamespaceService.Search"] = new NamespaceService().search



export function getEndpoint(serviceName, methodName) {
  return api[`${serviceName}.${methodName}`]
}
