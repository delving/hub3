/// <reference path="clients.d.ts" />
// Code generated by oto; DO NOT EDIT.

'use strict';

 
// NamespaceService allows you to programmatically manage namespaces
export class NamespaceService {
	
	// DeletetNamespace deletes a Namespace
	async deleteNamespace(deleteNamespaceRequest) {
		const headers = {
			'Accept': 'application/json',
			'Content-Type': 'application/json',
		}
		deleteNamespaceRequest = deleteNamespaceRequest || {}
		const response = await fetch((window.baseUrl || '') + '/oto/NamespaceService.DeleteNamespace', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(deleteNamespaceRequest)
		})
		return response.json().then(json => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
	// GetNamespace gets a Namespace
	async getNamespace(getNamespaceRequest) {
		const headers = {
			'Accept': 'application/json',
			'Content-Type': 'application/json',
		}
		getNamespaceRequest = getNamespaceRequest || {}
		const response = await fetch((window.baseUrl || '') + '/oto/NamespaceService.GetNamespace', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(getNamespaceRequest)
		})
		return response.json().then(json => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
	// PutNamespace stores a Namespace
	async putNamespace(putNamespaceRequest) {
		const headers = {
			'Accept': 'application/json',
			'Content-Type': 'application/json',
		}
		putNamespaceRequest = putNamespaceRequest || {}
		const response = await fetch((window.baseUrl || '') + '/oto/NamespaceService.PutNamespace', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(putNamespaceRequest)
		})
		return response.json().then(json => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
	// Search returns a filtered list of Namespaces
	async search(searchNamespaceRequest) {
		const headers = {
			'Accept': 'application/json',
			'Content-Type': 'application/json',
		}
		searchNamespaceRequest = searchNamespaceRequest || {}
		const response = await fetch((window.baseUrl || '') + '/oto/NamespaceService.Search', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(searchNamespaceRequest)
		})
		return response.json().then(json => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		})
	}
	
}

