#%RAML 1.0
---
title: Hub3 (Ikuzo) API
description: |
  This document describes how the Hub3 v2 API can be used.
version: v2

baseUri:
  value: http://hub3.{orgID}.delving.io/{version}

baseUriParameters:
  orgID:
    description: organization identifier for the tenant
    default: demo

protocols: [ HTTPS ]
mediaType: [ application/json ]

#documentation:
#  - !include docs/intro.doc.raml
#  - !include docs/ratelimiting.doc.raml
#  - !include docs/security.doc.raml

uses:
  traits: modules/traits/traits.lib.raml
  shapes: modules/dataTypes/shapes.lib.raml
  #anno: modules/annotationTypes/annotation.lib.raml
  #resources: modules/resourceTypes/resource-types.lib.raml


/search:
  description: |
    The search API provides a predictable API for interacting with RDF resources that are stored and indexed in HUB3. 

    The main challenge that this API is trying to solve is give API consumers access to the full richness of the Semantic Web without having to dive deep into Semantic Web technologies such as RDF, RDFs, OWL, SPARQL, etc. Irregardless, of the shape of the RDF this search API always returns the RDF record as a `Types.ResultItem`

    In order to support generic search for many different RDF Resource types, the default response is `Types.Summary`. During indexing custom tags specified in the HUB3 configuration are applied to each triple to specify what `Types.Summary` field it has. This allows for presenting a unified search result accross many different RDF resource types. To get access to the full resource model you can request it with `?itemFormat=fragmentGraph`.

    As opposed to the 'v1' API, no default facets/aggregations are returned. You have to specify them with the `facet.field` query parameter. You can list all available fields with `facet.field=searchLabel` query parameter.
  get:
    is: [
      traits.searchable,
      traits.facetable_legacy,
      traits.itemFormat,
      traits.orderable,
      traits.pageable,
      traits.filterable,
    ]
    responses:
      200:
        body:
          type: shapes.SearchResult
  /{hubID}:
    description: |
      Request a single `Types.ResultItem` 
    get:
      is: [
        traits.itemFormat,
      ]
      responses:
        200:
          body:
            type: shapes.ResultItem


