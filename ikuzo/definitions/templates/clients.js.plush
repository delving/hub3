// Code generated by oto; DO NOT EDIT.

'use strict';

async function doFetch(request, serviceName, methodName) {
		const headers = {
			'Accept': 'application/json',
			'Content-Type': 'application/json',
		}
		request = request || {}
		const response = await fetch(`${(window.baseUrl || '')}/oto/${serviceName}.${methodName}`, {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(request)
		})
		const json = await response.json();
		if(json.error) return [json.error, false];
		if(response.status <= 199 || response.status >= 300) return [response, false];
		return [json, true];
}

<%= for (service) in def.Services { %> 
<%= format_comment_text(service.Comment) %>export class <%= service.Name %> {
	<%= for (method) in service.Methods { %>
	<%= format_comment_text(method.Comment) %>	async <%= camelize_down(method.Name) %>(request) {
    return doFetch(request,"<%= service.Name %>","<%= method.Name %>")
	}
	<% } %>
}
<% } %>

const api = {}
<%= for (service) in def.Services { %>
<%= for (method) in service.Methods { %>
api["<%= service.Name + "." + method.Name %>"] = new <%= service.Name %>().<%= camelize_down(method.Name) %>
<% } %>
<% } %>

export function getEndpoint(serviceName, methodName) {
  return api[`${serviceName}.${methodName}`]
}
