// Code generated by oto; DO NOT EDIT.

package generated

import (
	"context"
	"net/http"

	"github.com/pacedotdev/oto/otohttp"

	domain "github.com/delving/hub3/ikuzo/domain"
)

// NamespaceService allows you to programmatically manage namespaces
type NamespaceService interface {

	// GetNamespace gets a Namespace
	GetNamespace(context.Context, GetNamespaceRequest) (*GetNamespaceResponse, error)
}

type namespaceServiceServer struct {
	server           *otohttp.Server
	namespaceService NamespaceService
}

// Register adds the NamespaceService to the otohttp.Server.
func RegisterNamespaceService(server *otohttp.Server, namespaceService NamespaceService) {
	handler := &namespaceServiceServer{
		server:           server,
		namespaceService: namespaceService,
	}
	server.Register("NamespaceService", "GetNamespace", handler.handleGetNamespace)
}

func (s *namespaceServiceServer) handleGetNamespace(w http.ResponseWriter, r *http.Request) {
	var request GetNamespaceRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.namespaceService.GetNamespace(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

// GetNamespaceRequest is the input object for GetNamespaceRequest.
type GetNamespaceRequest struct {
	// Prefix is the prefix of the Namespace
	Prefix string `json:"prefix"`
}

type Namespace struct {
	UUID      string   `json:"uuid"`
	Base      string   `json:"base"`
	Prefix    string   `json:"prefix"`
	BaseAlt   []string `json:"baseAlt"`
	PrefixAlt []string `json:"prefixAlt"`
	Schema    string   `json:"schema"`
	Temporary bool     `json:"temporary"`
}

// GetNamespaceResponse is the output object for GetNamespaceRequest.
type GetNamespaceResponse struct {
	// Namespaces are the namespaces that match the GetNamespaceRequest.Prefix
	Namespaces []domain.Namespace `json:"namespaces"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}
