// Code generated by oto; DO NOT EDIT.

package generated

import (
	"context"
	"net/http"

	"github.com/pacedotdev/oto/otohttp"

	domain "github.com/delving/hub3/ikuzo/domain"
)

// NamespaceService allows you to programmatically manage namespaces
type NamespaceService interface {

	// DeletetNamespace deletes a Namespace
	DeleteNamespace(context.Context, DeleteNamespaceRequest) (*DeleteNamespaceResponse, error)
	// GetNamespace gets a Namespace
	GetNamespace(context.Context, GetNamespaceRequest) (*GetNamespaceResponse, error)
	// PutNamespace stores a Namespace
	PutNamespace(context.Context, PutNamespaceRequest) (*PutNamespaceResponse, error)
	// Search returns a filtered list of Namespaces
	Search(context.Context, SearchNamespaceRequest) (*SearchNamespaceResponse, error)
}

type namespaceServiceServer struct {
	server           *otohttp.Server
	namespaceService NamespaceService
}

// Register adds the NamespaceService to the otohttp.Server.
func RegisterNamespaceService(server *otohttp.Server, namespaceService NamespaceService) {
	handler := &namespaceServiceServer{
		server:           server,
		namespaceService: namespaceService,
	}
	server.Register("NamespaceService", "DeleteNamespace", handler.handleDeleteNamespace)
	server.Register("NamespaceService", "GetNamespace", handler.handleGetNamespace)
	server.Register("NamespaceService", "PutNamespace", handler.handlePutNamespace)
	server.Register("NamespaceService", "Search", handler.handleSearch)
}

func (s *namespaceServiceServer) handleDeleteNamespace(w http.ResponseWriter, r *http.Request) {
	var request DeleteNamespaceRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.namespaceService.DeleteNamespace(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *namespaceServiceServer) handleGetNamespace(w http.ResponseWriter, r *http.Request) {
	var request GetNamespaceRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.namespaceService.GetNamespace(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *namespaceServiceServer) handlePutNamespace(w http.ResponseWriter, r *http.Request) {
	var request PutNamespaceRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.namespaceService.PutNamespace(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *namespaceServiceServer) handleSearch(w http.ResponseWriter, r *http.Request) {
	var request SearchNamespaceRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.namespaceService.Search(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

// DeleteNamespaceRequest is the input object for NamespaceService.DeleteNamespace
type DeleteNamespaceRequest struct {
	// ID is the unique identifier of a Namespace
	ID string `json:"id"`
}

// DeleteNamespaceRequest is the output object for NamespaceService.DeleteNamespace
type DeleteNamespaceResponse struct {
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}

// GetNamespaceRequest is the input object for GetNamespaceService.GetNamespace
type GetNamespaceRequest struct {
	// ID is the unique identifier of the namespace
	ID string `json:"id"`
}

// GetNamespaceResponse is the output object for GetNamespaceService.GetNamespace
type GetNamespaceResponse struct {
	// Namespace is the Namespace
	Namespace *domain.Namespace `json:"namespace"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}

// PutNamespaceRequest is the input object for NamespaceService.PutNamespace
type PutNamespaceRequest struct {
	Namespace *domain.Namespace `json:"namespace"`
}

// PutNamespaceResponse is the output object for NamespaceService.PutNamespace
type PutNamespaceResponse struct {
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}

// SearchNamespaceRequest is the input object for NamespaceService.Search
type SearchNamespaceRequest struct {
	// Prefix for a Namespace
	Prefix string `json:"prefix"`
	// BaseURI for a Namespace
	BaseURI string `json:"baseURI"`
}

// SearchNamespaceResponse is the output object for NamespaceService.Search
type SearchNamespaceResponse struct {
	// Hits returns the list of matching Namespaces
	Hits []*domain.Namespace `json:"hits"`
	// More indicates that there may be more search results. If true, make the same
	// Search request passing this Cursor.
	More bool `json:"more"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}
