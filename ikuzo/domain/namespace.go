// Copyright 2020 Delving B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package domain

import (
	"errors"
	"fmt"
	"strings"
)

var (
	ErrNamespaceNotFound       = errors.New("namespace not found")
	ErrNamespaceDuplicateEntry = errors.New("prefix and base stored in different entries")
	ErrNamespaceNotValid       = errors.New("prefix or base not valid")
)

// URI represents a NameSpace URI.
type URI string

// String returns a string representation of URI
func (uri URI) String() string {
	return string(uri)
}

// Namespace is a container for URI conversions for RDF- and XML-namespaces.
type Namespace struct {
	// ID is the unique identifier of a namespace (for internal use only).
	// This identifier will be generated by the store when empty.
	ID string `json:"id"`

	// Prefix is the default short version that identifies the base-uri
	// example: "dc"
	Prefix string `json:"prefix"`

	// URI is the default base-URI for a namespace
	// example: "http://purl.org/dc/elements/1.1/"
	URI string `json:"uri"`

	// Weight is used to sort Namespaces when they have the same Prefix or URI.
	// Default value is 0. The higher value is his higher priority
	// The store enforce that Prefix and URI together must be unique.
	Weight int `json:"weight"`
}

func (ns *Namespace) XMLNS() string {
	return "xmlns:" + ns.Prefix
}

func (ns *Namespace) String() string {
	return fmt.Sprintf("%s: %s", ns.Prefix, ns.URI)
}

// SplitURI takes a given URI and splits it into a base-URI and a localname.
// When the URI can't be split, the full URI is returned as the label with an
// empty base.
func SplitURI(uri string) (base, name string) {
	index := strings.LastIndex(uri, "#") + 1

	if index > 0 {
		return uri[:index], uri[index:]
	}

	index = strings.LastIndex(uri, "/") + 1

	if index > 0 {
		return uri[:index], uri[index:]
	}

	return "", uri
}
