// +build ignore

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"text/template"
)

type level struct {
	current int
}

func (l level) GetNext() string    { return fmt.Sprintf("%02d", l.current+1) }
func (l level) GetCurrent() string { return fmt.Sprintf("%02d", l.current) }
func (l level) HasNested() bool    { return l.current != 20 }
func (l level) NextTag() string    { return fmt.Sprintf("`xml:\"c%02d,omitempty\"`", l.current+1) }
func (l level) CurrentTag() string { return fmt.Sprintf("`xml:\"c%02d,omitempty\"`", l.current) }

func main() {

	levels := []level{}
	for i := 1; i < 21; i++ {
		levels = append(levels, level{current: i})
	}

	tmpl := `
	// Code generated by number_gen.go; DO NOT EDIT.

	package ead

	import (
		"encoding/xml"
	)

	{{range .}}
		type Cc{{.GetCurrent}} struct {
			XMLName xml.Name {{.CurrentTag}}
			Cc
			{{if .HasNested}} Numbered []*Cc{{.GetNext}} {{.NextTag}} {{end}}
		}

		func (c *Cc{{.GetCurrent}}) GetNested() []CLevel {
			levels := []CLevel{}
			{{if .HasNested -}}
			for _, cc := range c.Numbered {
				levels = append(levels, cc)
			}
			{{end}}
			return levels
		}

		func (c *Cc{{.GetCurrent}}) GetCc() *Cc {
			return &c.Cc
		}
	{{end}}
	`

	t, err := template.New("numbered").Parse(tmpl)
	if err != nil {
		log.Fatalf("unable to parse template; %s", err)
	}

	var buf bytes.Buffer
	err = t.Execute(&buf, levels)
	if err != nil {
		log.Fatalf("unable to run template; %#v", err.(template.ExecError).Err)
	}

	b, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatalf("unable to format code; %#v", err)
	}

	err = ioutil.WriteFile("numbered.go", b, os.ModePerm)
	if err != nil {
		log.Fatalf("unable to save generated file; %#v", err)
	}

}
