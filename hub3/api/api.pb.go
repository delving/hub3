// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hub3/api/api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	hub3/api/api.proto

It has these top-level messages:
	SearchRequest
	DetailRequest
	BreadCrumb
	PaginationLink
	Pagination
	Query
	Facet
	FaceLink
	MetadataFieldV1
	MetadataItemV1
	SearchResultWrapperV1
	SearchResultV1
	DetailResult
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ResponseFormatType int32

const (
	ResponseFormatType_PROTOBUF ResponseFormatType = 0
	ResponseFormatType_JSON     ResponseFormatType = 1
	// not supported
	ResponseFormatType_XML ResponseFormatType = 2
	// not supported
	ResponseFormatType_JSONP ResponseFormatType = 3
	// not supported
	ResponseFormatType_KML ResponseFormatType = 4
	// not supported
	ResponseFormatType_GEOCLUSTER ResponseFormatType = 5
	// not supported
	ResponseFormatType_GEOJSON ResponseFormatType = 6
)

var ResponseFormatType_name = map[int32]string{
	0: "PROTOBUF",
	1: "JSON",
	2: "XML",
	3: "JSONP",
	4: "KML",
	5: "GEOCLUSTER",
	6: "GEOJSON",
}
var ResponseFormatType_value = map[string]int32{
	"PROTOBUF":   0,
	"JSON":       1,
	"XML":        2,
	"JSONP":      3,
	"KML":        4,
	"GEOCLUSTER": 5,
	"GEOJSON":    6,
}

func (x ResponseFormatType) String() string {
	return proto.EnumName(ResponseFormatType_name, int32(x))
}
func (ResponseFormatType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ResponseBlockType int32

const (
	ResponseBlockType_QUERY  ResponseBlockType = 0
	ResponseBlockType_ITEMS  ResponseBlockType = 1
	ResponseBlockType_FACETS ResponseBlockType = 2
	ResponseBlockType_LAYOUT ResponseBlockType = 3
)

var ResponseBlockType_name = map[int32]string{
	0: "QUERY",
	1: "ITEMS",
	2: "FACETS",
	3: "LAYOUT",
}
var ResponseBlockType_value = map[string]int32{
	"QUERY":  0,
	"ITEMS":  1,
	"FACETS": 2,
	"LAYOUT": 3,
}

func (x ResponseBlockType) String() string {
	return proto.EnumName(ResponseBlockType_name, int32(x))
}
func (ResponseBlockType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GeoType int32

const (
	GeoType_BBOX    GeoType = 0
	GeoType_GEOFILT GeoType = 1
)

var GeoType_name = map[int32]string{
	0: "BBOX",
	1: "GEOFILT",
}
var GeoType_value = map[string]int32{
	"BBOX":    0,
	"GEOFILT": 1,
}

func (x GeoType) String() string {
	return proto.EnumName(GeoType_name, int32(x))
}
func (GeoType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type IdType int32

const (
	// same as ES doc_id
	IdType_HUDID IdType = 0
	// case insensitive id search
	IdType_IDCI IdType = 1
	// named graph
	IdType_NAMEDGRAPH IdType = 2
)

var IdType_name = map[int32]string{
	0: "HUDID",
	1: "IDCI",
	2: "NAMEDGRAPH",
}
var IdType_value = map[string]int32{
	"HUDID":      0,
	"IDCI":       1,
	"NAMEDGRAPH": 2,
}

func (x IdType) String() string {
	return proto.EnumName(IdType_name, int32(x))
}
func (IdType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type SearchRequest struct {
	// Will output a summary result set. Any valid Lucene or Solr Query syntax will work.
	Query  string             `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	Format ResponseFormatType `protobuf:"varint,2,opt,name=format,enum=api.ResponseFormatType" json:"format,omitempty"`
	// number of results returned
	// rows
	ResponseSize      int32                `protobuf:"varint,3,opt,name=responseSize" json:"responseSize,omitempty"`
	Start             int32                `protobuf:"varint,4,opt,name=start" json:"start,omitempty"`
	Page              int32                `protobuf:"varint,5,opt,name=page" json:"page,omitempty"`
	QueryFilter       []string             `protobuf:"bytes,6,rep,name=QueryFilter" json:"QueryFilter,omitempty"`
	HiddenQueryFilter []string             `protobuf:"bytes,7,rep,name=HiddenQueryFilter" json:"HiddenQueryFilter,omitempty"`
	Disable           []ResponseBlockType  `protobuf:"varint,8,rep,packed,name=disable,enum=api.ResponseBlockType" json:"disable,omitempty"`
	Enable            []ResponseFormatType `protobuf:"varint,9,rep,packed,name=enable,enum=api.ResponseFormatType" json:"enable,omitempty"`
	FacetField        []string             `protobuf:"bytes,10,rep,name=FacetField" json:"FacetField,omitempty"`
	FacetLimit        int32                `protobuf:"varint,11,opt,name=FacetLimit" json:"FacetLimit,omitempty"`
	FacetBoolType     bool                 `protobuf:"varint,12,opt,name=FacetBoolType" json:"FacetBoolType,omitempty"`
	SortBy            string               `protobuf:"bytes,13,opt,name=sortBy" json:"sortBy,omitempty"`
	// geo options
	LatLong  string `protobuf:"bytes,14,opt,name=LatLong" json:"LatLong,omitempty"`
	Distance string `protobuf:"bytes,15,opt,name=Distance" json:"Distance,omitempty"`
	// min_* and max_* are the bounding box parameters
	MinX float32 `protobuf:"fixed32,16,opt,name=min_x,json=minX" json:"min_x,omitempty"`
	MinY float32 `protobuf:"fixed32,17,opt,name=min_y,json=minY" json:"min_y,omitempty"`
	MaxX float32 `protobuf:"fixed32,18,opt,name=max_x,json=maxX" json:"max_x,omitempty"`
	MaxY float32 `protobuf:"fixed32,19,opt,name=max_y,json=maxY" json:"max_y,omitempty"`
	// add support for polygon
	Field   []string `protobuf:"bytes,20,rep,name=field" json:"field,omitempty"`
	GeoType GeoType  `protobuf:"varint,21,opt,name=geoType,enum=api.GeoType" json:"geoType,omitempty"`
	// qr
	QueryRefinement string `protobuf:"bytes,22,opt,name=QueryRefinement" json:"QueryRefinement,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SearchRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *SearchRequest) GetFormat() ResponseFormatType {
	if m != nil {
		return m.Format
	}
	return ResponseFormatType_PROTOBUF
}

func (m *SearchRequest) GetResponseSize() int32 {
	if m != nil {
		return m.ResponseSize
	}
	return 0
}

func (m *SearchRequest) GetStart() int32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *SearchRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *SearchRequest) GetQueryFilter() []string {
	if m != nil {
		return m.QueryFilter
	}
	return nil
}

func (m *SearchRequest) GetHiddenQueryFilter() []string {
	if m != nil {
		return m.HiddenQueryFilter
	}
	return nil
}

func (m *SearchRequest) GetDisable() []ResponseBlockType {
	if m != nil {
		return m.Disable
	}
	return nil
}

func (m *SearchRequest) GetEnable() []ResponseFormatType {
	if m != nil {
		return m.Enable
	}
	return nil
}

func (m *SearchRequest) GetFacetField() []string {
	if m != nil {
		return m.FacetField
	}
	return nil
}

func (m *SearchRequest) GetFacetLimit() int32 {
	if m != nil {
		return m.FacetLimit
	}
	return 0
}

func (m *SearchRequest) GetFacetBoolType() bool {
	if m != nil {
		return m.FacetBoolType
	}
	return false
}

func (m *SearchRequest) GetSortBy() string {
	if m != nil {
		return m.SortBy
	}
	return ""
}

func (m *SearchRequest) GetLatLong() string {
	if m != nil {
		return m.LatLong
	}
	return ""
}

func (m *SearchRequest) GetDistance() string {
	if m != nil {
		return m.Distance
	}
	return ""
}

func (m *SearchRequest) GetMinX() float32 {
	if m != nil {
		return m.MinX
	}
	return 0
}

func (m *SearchRequest) GetMinY() float32 {
	if m != nil {
		return m.MinY
	}
	return 0
}

func (m *SearchRequest) GetMaxX() float32 {
	if m != nil {
		return m.MaxX
	}
	return 0
}

func (m *SearchRequest) GetMaxY() float32 {
	if m != nil {
		return m.MaxY
	}
	return 0
}

func (m *SearchRequest) GetField() []string {
	if m != nil {
		return m.Field
	}
	return nil
}

func (m *SearchRequest) GetGeoType() GeoType {
	if m != nil {
		return m.GeoType
	}
	return GeoType_BBOX
}

func (m *SearchRequest) GetQueryRefinement() string {
	if m != nil {
		return m.QueryRefinement
	}
	return ""
}

type DetailRequest struct {
	// option: any valid identifier specified by the idType
	// description: Will output a full-view. Default idType is hubId taken from the delving_hubId field.
	Id             string             `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Mlt            bool               `protobuf:"varint,2,opt,name=mlt" json:"mlt,omitempty"`
	Format         ResponseFormatType `protobuf:"varint,3,opt,name=format,enum=api.ResponseFormatType" json:"format,omitempty"`
	MltCount       int32              `protobuf:"varint,4,opt,name=mltCount" json:"mltCount,omitempty"`
	MltQueryFilter string             `protobuf:"bytes,5,opt,name=mltQueryFilter" json:"mltQueryFilter,omitempty"`
	MltFilterKey   string             `protobuf:"bytes,6,opt,name=mltFilterKey" json:"mltFilterKey,omitempty"`
	// searchRequest is a serialised form of the search result and is the return
	// to results link
	SearchRequest string `protobuf:"bytes,7,opt,name=searchRequest" json:"searchRequest,omitempty"`
	// resultIndex is the point where this detail object is in the search result order
	ResultIndex int32 `protobuf:"varint,8,opt,name=resultIndex" json:"resultIndex,omitempty"`
	// converter for result fields
	Converter string `protobuf:"bytes,9,opt,name=converter" json:"converter,omitempty"`
	// the type of id used in the ?id field
	IdType IdType `protobuf:"varint,10,opt,name=idType,enum=api.IdType" json:"idType,omitempty"`
}

func (m *DetailRequest) Reset()                    { *m = DetailRequest{} }
func (m *DetailRequest) String() string            { return proto.CompactTextString(m) }
func (*DetailRequest) ProtoMessage()               {}
func (*DetailRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DetailRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DetailRequest) GetMlt() bool {
	if m != nil {
		return m.Mlt
	}
	return false
}

func (m *DetailRequest) GetFormat() ResponseFormatType {
	if m != nil {
		return m.Format
	}
	return ResponseFormatType_PROTOBUF
}

func (m *DetailRequest) GetMltCount() int32 {
	if m != nil {
		return m.MltCount
	}
	return 0
}

func (m *DetailRequest) GetMltQueryFilter() string {
	if m != nil {
		return m.MltQueryFilter
	}
	return ""
}

func (m *DetailRequest) GetMltFilterKey() string {
	if m != nil {
		return m.MltFilterKey
	}
	return ""
}

func (m *DetailRequest) GetSearchRequest() string {
	if m != nil {
		return m.SearchRequest
	}
	return ""
}

func (m *DetailRequest) GetResultIndex() int32 {
	if m != nil {
		return m.ResultIndex
	}
	return 0
}

func (m *DetailRequest) GetConverter() string {
	if m != nil {
		return m.Converter
	}
	return ""
}

func (m *DetailRequest) GetIdType() IdType {
	if m != nil {
		return m.IdType
	}
	return IdType_HUDID
}

type BreadCrumb struct {
	Href           string `protobuf:"bytes,1,opt,name=href" json:"href,omitempty"`
	Display        string `protobuf:"bytes,2,opt,name=display" json:"display,omitempty"`
	Field          string `protobuf:"bytes,3,opt,name=field" json:"field,omitempty"`
	LocalisedField string `protobuf:"bytes,4,opt,name=localised_field,json=localisedField" json:"localised_field,omitempty"`
	Value          string `protobuf:"bytes,5,opt,name=value" json:"value,omitempty"`
	IsLast         bool   `protobuf:"varint,6,opt,name=is_last,json=isLast" json:"is_last,omitempty"`
}

func (m *BreadCrumb) Reset()                    { *m = BreadCrumb{} }
func (m *BreadCrumb) String() string            { return proto.CompactTextString(m) }
func (*BreadCrumb) ProtoMessage()               {}
func (*BreadCrumb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BreadCrumb) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *BreadCrumb) GetDisplay() string {
	if m != nil {
		return m.Display
	}
	return ""
}

func (m *BreadCrumb) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *BreadCrumb) GetLocalisedField() string {
	if m != nil {
		return m.LocalisedField
	}
	return ""
}

func (m *BreadCrumb) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *BreadCrumb) GetIsLast() bool {
	if m != nil {
		return m.IsLast
	}
	return false
}

type PaginationLink struct {
	Start      int32 `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	IsLinked   bool  `protobuf:"varint,2,opt,name=isLinked" json:"isLinked,omitempty"`
	PageNumber int32 `protobuf:"varint,3,opt,name=pageNumber" json:"pageNumber,omitempty"`
}

func (m *PaginationLink) Reset()                    { *m = PaginationLink{} }
func (m *PaginationLink) String() string            { return proto.CompactTextString(m) }
func (*PaginationLink) ProtoMessage()               {}
func (*PaginationLink) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PaginationLink) GetStart() int32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *PaginationLink) GetIsLinked() bool {
	if m != nil {
		return m.IsLinked
	}
	return false
}

func (m *PaginationLink) GetPageNumber() int32 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

type Pagination struct {
	Start        int32             `protobuf:"varint,1,opt,name=start" json:"start,omitempty"`
	Rows         int32             `protobuf:"varint,2,opt,name=rows" json:"rows,omitempty"`
	NumFound     int32             `protobuf:"varint,3,opt,name=numFound" json:"numFound,omitempty"`
	HasNext      bool              `protobuf:"varint,4,opt,name=hasNext" json:"hasNext,omitempty"`
	NextPage     int32             `protobuf:"varint,5,opt,name=nextPage" json:"nextPage,omitempty"`
	HasPrevious  bool              `protobuf:"varint,6,opt,name=hasPrevious" json:"hasPrevious,omitempty"`
	PreviousPage int32             `protobuf:"varint,7,opt,name=previousPage" json:"previousPage,omitempty"`
	CurrentPage  int32             `protobuf:"varint,8,opt,name=currentPage" json:"currentPage,omitempty"`
	Links        []*PaginationLink `protobuf:"bytes,9,rep,name=links" json:"links,omitempty"`
}

func (m *Pagination) Reset()                    { *m = Pagination{} }
func (m *Pagination) String() string            { return proto.CompactTextString(m) }
func (*Pagination) ProtoMessage()               {}
func (*Pagination) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Pagination) GetStart() int32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Pagination) GetRows() int32 {
	if m != nil {
		return m.Rows
	}
	return 0
}

func (m *Pagination) GetNumFound() int32 {
	if m != nil {
		return m.NumFound
	}
	return 0
}

func (m *Pagination) GetHasNext() bool {
	if m != nil {
		return m.HasNext
	}
	return false
}

func (m *Pagination) GetNextPage() int32 {
	if m != nil {
		return m.NextPage
	}
	return 0
}

func (m *Pagination) GetHasPrevious() bool {
	if m != nil {
		return m.HasPrevious
	}
	return false
}

func (m *Pagination) GetPreviousPage() int32 {
	if m != nil {
		return m.PreviousPage
	}
	return 0
}

func (m *Pagination) GetCurrentPage() int32 {
	if m != nil {
		return m.CurrentPage
	}
	return 0
}

func (m *Pagination) GetLinks() []*PaginationLink {
	if m != nil {
		return m.Links
	}
	return nil
}

type Query struct {
	Numfound    int32         `protobuf:"varint,1,opt,name=numfound" json:"numfound,omitempty"`
	Terms       string        `protobuf:"bytes,2,opt,name=terms" json:"terms,omitempty"`
	BreadCrumbs []*BreadCrumb `protobuf:"bytes,3,rep,name=breadCrumbs" json:"breadCrumbs,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Query) GetNumfound() int32 {
	if m != nil {
		return m.Numfound
	}
	return 0
}

func (m *Query) GetTerms() string {
	if m != nil {
		return m.Terms
	}
	return ""
}

func (m *Query) GetBreadCrumbs() []*BreadCrumb {
	if m != nil {
		return m.BreadCrumbs
	}
	return nil
}

type Facet struct {
	Name        string      `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	IsSelecet   bool        `protobuf:"varint,2,opt,name=isSelecet" json:"isSelecet,omitempty"`
	I18N        string      `protobuf:"bytes,3,opt,name=i18n" json:"i18n,omitempty"`
	Total       int32       `protobuf:"varint,4,opt,name=total" json:"total,omitempty"`
	MissingDocs int32       `protobuf:"varint,5,opt,name=missingDocs" json:"missingDocs,omitempty"`
	OtherDocs   int32       `protobuf:"varint,6,opt,name=otherDocs" json:"otherDocs,omitempty"`
	Links       []*FaceLink `protobuf:"bytes,7,rep,name=links" json:"links,omitempty"`
}

func (m *Facet) Reset()                    { *m = Facet{} }
func (m *Facet) String() string            { return proto.CompactTextString(m) }
func (*Facet) ProtoMessage()               {}
func (*Facet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Facet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Facet) GetIsSelecet() bool {
	if m != nil {
		return m.IsSelecet
	}
	return false
}

func (m *Facet) GetI18N() string {
	if m != nil {
		return m.I18N
	}
	return ""
}

func (m *Facet) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Facet) GetMissingDocs() int32 {
	if m != nil {
		return m.MissingDocs
	}
	return 0
}

func (m *Facet) GetOtherDocs() int32 {
	if m != nil {
		return m.OtherDocs
	}
	return 0
}

func (m *Facet) GetLinks() []*FaceLink {
	if m != nil {
		return m.Links
	}
	return nil
}

type FaceLink struct {
	Url           string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	IsSelected    bool   `protobuf:"varint,2,opt,name=isSelected" json:"isSelected,omitempty"`
	Value         string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	Count         int32  `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	DisplayString string `protobuf:"bytes,5,opt,name=displayString" json:"displayString,omitempty"`
}

func (m *FaceLink) Reset()                    { *m = FaceLink{} }
func (m *FaceLink) String() string            { return proto.CompactTextString(m) }
func (*FaceLink) ProtoMessage()               {}
func (*FaceLink) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *FaceLink) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *FaceLink) GetIsSelected() bool {
	if m != nil {
		return m.IsSelected
	}
	return false
}

func (m *FaceLink) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *FaceLink) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *FaceLink) GetDisplayString() string {
	if m != nil {
		return m.DisplayString
	}
	return ""
}

type MetadataFieldV1 struct {
	Field []string `protobuf:"bytes,1,rep,name=field" json:"field,omitempty"`
}

func (m *MetadataFieldV1) Reset()                    { *m = MetadataFieldV1{} }
func (m *MetadataFieldV1) String() string            { return proto.CompactTextString(m) }
func (*MetadataFieldV1) ProtoMessage()               {}
func (*MetadataFieldV1) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MetadataFieldV1) GetField() []string {
	if m != nil {
		return m.Field
	}
	return nil
}

type MetadataItemV1 struct {
	DocId   string                      `protobuf:"bytes,1,opt,name=doc_id,json=docId" json:"doc_id,omitempty"`
	DocType string                      `protobuf:"bytes,2,opt,name=doc_type,json=docType" json:"doc_type,omitempty"`
	Fields  map[string]*MetadataFieldV1 `protobuf:"bytes,3,rep,name=fields" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MetadataItemV1) Reset()                    { *m = MetadataItemV1{} }
func (m *MetadataItemV1) String() string            { return proto.CompactTextString(m) }
func (*MetadataItemV1) ProtoMessage()               {}
func (*MetadataItemV1) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MetadataItemV1) GetDocId() string {
	if m != nil {
		return m.DocId
	}
	return ""
}

func (m *MetadataItemV1) GetDocType() string {
	if m != nil {
		return m.DocType
	}
	return ""
}

func (m *MetadataItemV1) GetFields() map[string]*MetadataFieldV1 {
	if m != nil {
		return m.Fields
	}
	return nil
}

type SearchResultWrapperV1 struct {
	Result *SearchResultV1 `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *SearchResultWrapperV1) Reset()                    { *m = SearchResultWrapperV1{} }
func (m *SearchResultWrapperV1) String() string            { return proto.CompactTextString(m) }
func (*SearchResultWrapperV1) ProtoMessage()               {}
func (*SearchResultWrapperV1) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SearchResultWrapperV1) GetResult() *SearchResultV1 {
	if m != nil {
		return m.Result
	}
	return nil
}

// Full SearchResult
type SearchResultV1 struct {
	Query      *Query            `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	Pagination *Pagination       `protobuf:"bytes,2,opt,name=pagination" json:"pagination,omitempty"`
	Items      []*MetadataItemV1 `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
	Facets     []*Facet          `protobuf:"bytes,4,rep,name=facets" json:"facets,omitempty"`
}

func (m *SearchResultV1) Reset()                    { *m = SearchResultV1{} }
func (m *SearchResultV1) String() string            { return proto.CompactTextString(m) }
func (*SearchResultV1) ProtoMessage()               {}
func (*SearchResultV1) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SearchResultV1) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *SearchResultV1) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *SearchResultV1) GetItems() []*MetadataItemV1 {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *SearchResultV1) GetFacets() []*Facet {
	if m != nil {
		return m.Facets
	}
	return nil
}

// The structure of the detail page
type DetailResult struct {
	Item *MetadataItemV1 `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
}

func (m *DetailResult) Reset()                    { *m = DetailResult{} }
func (m *DetailResult) String() string            { return proto.CompactTextString(m) }
func (*DetailResult) ProtoMessage()               {}
func (*DetailResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DetailResult) GetItem() *MetadataItemV1 {
	if m != nil {
		return m.Item
	}
	return nil
}

func init() {
	proto.RegisterType((*SearchRequest)(nil), "api.SearchRequest")
	proto.RegisterType((*DetailRequest)(nil), "api.DetailRequest")
	proto.RegisterType((*BreadCrumb)(nil), "api.BreadCrumb")
	proto.RegisterType((*PaginationLink)(nil), "api.PaginationLink")
	proto.RegisterType((*Pagination)(nil), "api.Pagination")
	proto.RegisterType((*Query)(nil), "api.Query")
	proto.RegisterType((*Facet)(nil), "api.Facet")
	proto.RegisterType((*FaceLink)(nil), "api.FaceLink")
	proto.RegisterType((*MetadataFieldV1)(nil), "api.MetadataFieldV1")
	proto.RegisterType((*MetadataItemV1)(nil), "api.MetadataItemV1")
	proto.RegisterType((*SearchResultWrapperV1)(nil), "api.SearchResultWrapperV1")
	proto.RegisterType((*SearchResultV1)(nil), "api.SearchResultV1")
	proto.RegisterType((*DetailResult)(nil), "api.DetailResult")
	proto.RegisterEnum("api.ResponseFormatType", ResponseFormatType_name, ResponseFormatType_value)
	proto.RegisterEnum("api.ResponseBlockType", ResponseBlockType_name, ResponseBlockType_value)
	proto.RegisterEnum("api.GeoType", GeoType_name, GeoType_value)
	proto.RegisterEnum("api.IdType", IdType_name, IdType_value)
}

func init() { proto.RegisterFile("hub3/api/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xcf, 0x72, 0xdb, 0x36,
	0x13, 0x0f, 0x25, 0x91, 0x92, 0x57, 0xb6, 0xcc, 0xc0, 0x4e, 0xc2, 0xcf, 0xf3, 0xcd, 0xf7, 0x69,
	0x98, 0x4e, 0xa2, 0xba, 0x6d, 0x52, 0x3b, 0x87, 0x64, 0x7a, 0xb3, 0x2d, 0xc9, 0x51, 0x23, 0x5b,
	0x0e, 0x65, 0xbb, 0xf6, 0xc9, 0x03, 0x8b, 0x90, 0x8d, 0x31, 0xff, 0x28, 0x04, 0x94, 0x4a, 0x7d,
	0x88, 0xbe, 0x40, 0x5f, 0xa0, 0xe7, 0xbe, 0x44, 0x7b, 0xe8, 0xb5, 0xef, 0xd3, 0xc1, 0x12, 0xa4,
	0x28, 0xa7, 0x99, 0xe9, 0x81, 0x33, 0xd8, 0xdf, 0x2e, 0x16, 0xbb, 0x8b, 0xdf, 0x2e, 0x01, 0xe4,
	0x76, 0x7a, 0xfd, 0xea, 0x25, 0x9d, 0x70, 0xf5, 0xbd, 0x98, 0x24, 0xb1, 0x8c, 0x49, 0x99, 0x4e,
	0xb8, 0xfb, 0xbb, 0x09, 0x6b, 0x43, 0x46, 0x93, 0xd1, 0xad, 0xc7, 0x3e, 0x4c, 0x99, 0x90, 0x64,
	0x13, 0xcc, 0x0f, 0x53, 0x96, 0xcc, 0x1d, 0xa3, 0x69, 0xb4, 0x56, 0xbc, 0x54, 0x20, 0x2f, 0xc1,
	0x1a, 0xc7, 0x49, 0x48, 0xa5, 0x53, 0x6a, 0x1a, 0xad, 0xc6, 0xee, 0x93, 0x17, 0xca, 0x91, 0xc7,
	0xc4, 0x24, 0x8e, 0x04, 0xeb, 0xa2, 0xea, 0x74, 0x3e, 0x61, 0x9e, 0x36, 0x23, 0x2e, 0xac, 0x26,
	0x5a, 0x3b, 0xe4, 0x3f, 0x31, 0xa7, 0xdc, 0x34, 0x5a, 0xa6, 0xb7, 0x84, 0xa9, 0xa3, 0x84, 0xa4,
	0x89, 0x74, 0x2a, 0xa8, 0x4c, 0x05, 0x42, 0xa0, 0x32, 0xa1, 0x37, 0xcc, 0x31, 0x11, 0xc4, 0x35,
	0x69, 0x42, 0xfd, 0xbd, 0x8a, 0xa3, 0xcb, 0x03, 0xc9, 0x12, 0xc7, 0x6a, 0x96, 0x5b, 0x2b, 0x5e,
	0x11, 0x22, 0x5f, 0xc3, 0xc3, 0xb7, 0xdc, 0xf7, 0x59, 0x54, 0xb4, 0xab, 0xa2, 0xdd, 0xa7, 0x0a,
	0xf2, 0x2d, 0x54, 0x7d, 0x2e, 0xe8, 0x75, 0xc0, 0x9c, 0x5a, 0xb3, 0xdc, 0x6a, 0xec, 0x3e, 0x5e,
	0xca, 0x67, 0x3f, 0x88, 0x47, 0x77, 0x98, 0x4e, 0x66, 0xa6, 0x0a, 0xc0, 0x22, 0xdc, 0xb0, 0x82,
	0x1b, 0x3e, 0x5f, 0x80, 0xd4, 0x8c, 0xfc, 0x0f, 0xa0, 0x4b, 0x47, 0x4c, 0x76, 0x39, 0x0b, 0x7c,
	0x07, 0x30, 0x92, 0x02, 0x92, 0xeb, 0xfb, 0x3c, 0xe4, 0xd2, 0xa9, 0x63, 0xb2, 0x05, 0x84, 0x7c,
	0x01, 0x6b, 0x28, 0xed, 0xc7, 0x71, 0xa0, 0x1c, 0x3b, 0xab, 0x4d, 0xa3, 0x55, 0xf3, 0x96, 0x41,
	0xf2, 0x18, 0x2c, 0x11, 0x27, 0x72, 0x7f, 0xee, 0xac, 0xe1, 0x75, 0x69, 0x89, 0x38, 0x50, 0xed,
	0x53, 0xd9, 0x8f, 0xa3, 0x1b, 0xa7, 0x81, 0x8a, 0x4c, 0x24, 0x5b, 0x50, 0x6b, 0x73, 0x21, 0x69,
	0x34, 0x62, 0xce, 0x3a, 0xaa, 0x72, 0x99, 0x6c, 0x80, 0x19, 0xf2, 0xe8, 0x6a, 0xe6, 0xd8, 0x4d,
	0xa3, 0x55, 0xf2, 0x2a, 0x21, 0x8f, 0x2e, 0x32, 0x70, 0xee, 0x3c, 0xcc, 0xc1, 0x4b, 0x04, 0xe9,
	0xec, 0x6a, 0xe6, 0x10, 0x0d, 0xd2, 0xd9, 0x45, 0x06, 0xce, 0x9d, 0x8d, 0x1c, 0xbc, 0x54, 0x97,
	0x3c, 0xc6, 0x12, 0x6c, 0x62, 0x09, 0x52, 0x81, 0x3c, 0x83, 0xea, 0x0d, 0x8b, 0x31, 0xaf, 0x47,
	0x48, 0xa8, 0x55, 0xac, 0xe7, 0x61, 0x8a, 0x79, 0x99, 0x92, 0xb4, 0x60, 0x1d, 0xef, 0xcd, 0x63,
	0x63, 0x1e, 0xb1, 0x90, 0x45, 0xd2, 0x79, 0x8c, 0x41, 0xdf, 0x87, 0xdd, 0xbf, 0x4a, 0xb0, 0xd6,
	0x66, 0x92, 0xf2, 0x20, 0x63, 0x72, 0x03, 0x4a, 0xdc, 0xd7, 0x34, 0x2e, 0x71, 0x9f, 0xd8, 0x50,
	0x0e, 0x83, 0x94, 0xc0, 0x35, 0x4f, 0x2d, 0x0b, 0xac, 0x2e, 0xff, 0x3b, 0x56, 0x6f, 0x41, 0x2d,
	0x0c, 0xe4, 0x41, 0x3c, 0x8d, 0x32, 0xd2, 0xe6, 0x32, 0x79, 0x06, 0x8d, 0x30, 0x90, 0x45, 0xfa,
	0x99, 0x78, 0xf4, 0x3d, 0x54, 0x75, 0x46, 0x18, 0xc8, 0x54, 0x78, 0xc7, 0xe6, 0x8e, 0x85, 0x56,
	0x4b, 0x98, 0xba, 0x7c, 0x51, 0xec, 0x4a, 0xa7, 0x8a, 0x46, 0xcb, 0xa0, 0xea, 0x8a, 0x84, 0x89,
	0x69, 0x20, 0x7b, 0x91, 0xcf, 0x66, 0x4e, 0x0d, 0x03, 0x2a, 0x42, 0xe4, 0xbf, 0xb0, 0x32, 0x8a,
	0xa3, 0x8f, 0x2c, 0x51, 0xe1, 0xac, 0xa0, 0x8f, 0x05, 0x40, 0x9e, 0x82, 0xc5, 0x7d, 0xbc, 0x03,
	0xc0, 0xf4, 0xeb, 0x98, 0x7e, 0xcf, 0x4f, 0x53, 0x4e, 0x55, 0xee, 0xaf, 0x06, 0xc0, 0x7e, 0xc2,
	0xa8, 0x7f, 0x90, 0x4c, 0xc3, 0x6b, 0xd5, 0x9d, 0xb7, 0x09, 0x1b, 0xeb, 0xb2, 0xe2, 0x5a, 0x91,
	0xcd, 0xe7, 0x62, 0x12, 0xd0, 0x39, 0x16, 0x77, 0xc5, 0xcb, 0xc4, 0xc5, 0xe5, 0x97, 0xd3, 0x61,
	0x92, 0x5e, 0xfe, 0x73, 0x58, 0x0f, 0xe2, 0x11, 0x0d, 0xb8, 0x60, 0xfe, 0x55, 0xaa, 0xaf, 0xa4,
	0xa5, 0xca, 0xe1, 0xb4, 0x47, 0x36, 0xc1, 0xfc, 0x48, 0x83, 0x29, 0xd3, 0x95, 0x4c, 0x05, 0xf2,
	0x04, 0xaa, 0x5c, 0x5c, 0x05, 0x54, 0x48, 0xac, 0x5d, 0xcd, 0xb3, 0xb8, 0xe8, 0x53, 0x21, 0xdd,
	0x6b, 0x68, 0x9c, 0xd0, 0x1b, 0x1e, 0x51, 0xc9, 0xe3, 0xa8, 0xcf, 0xa3, 0xbb, 0xc5, 0x84, 0x31,
	0x8a, 0x13, 0x66, 0x0b, 0x6a, 0x5c, 0x28, 0x3d, 0xf3, 0x35, 0x1b, 0x72, 0x59, 0xb5, 0xa5, 0x9a,
	0x38, 0xc7, 0xd3, 0xf0, 0x9a, 0x25, 0x7a, 0x6a, 0x15, 0x10, 0xf7, 0x97, 0x12, 0xc0, 0xe2, 0x90,
	0xcf, 0x1c, 0x40, 0xa0, 0x92, 0xc4, 0x3f, 0x0a, 0x74, 0x6e, 0x7a, 0xb8, 0x56, 0x87, 0x46, 0xd3,
	0xb0, 0x1b, 0x4f, 0x23, 0x5f, 0xbb, 0xcd, 0x65, 0x55, 0xc0, 0x5b, 0x2a, 0x8e, 0xd9, 0x2c, 0x65,
	0x55, 0xcd, 0xcb, 0x44, 0xdc, 0xc5, 0x66, 0xf2, 0x64, 0x31, 0x10, 0x73, 0x59, 0x5d, 0xff, 0x2d,
	0x15, 0x27, 0x09, 0xfb, 0xc8, 0xe3, 0xa9, 0xd0, 0xb5, 0x28, 0x42, 0x8a, 0x6a, 0x13, 0xbd, 0x46,
	0x0f, 0xd5, 0x74, 0x08, 0x17, 0x31, 0xe5, 0x65, 0x34, 0x4d, 0x12, 0x16, 0xa5, 0x87, 0x68, 0x12,
	0x15, 0x20, 0xf2, 0x25, 0x98, 0x01, 0x8f, 0xee, 0x04, 0x4e, 0xbe, 0xfa, 0xee, 0x06, 0xb2, 0x64,
	0xb9, 0xd0, 0x5e, 0x6a, 0xe1, 0x06, 0x60, 0x22, 0xd5, 0x75, 0xb6, 0x63, 0xcc, 0xd6, 0xc8, 0xb3,
	0x45, 0x59, 0xd5, 0x4c, 0xb2, 0x24, 0x14, 0x9a, 0x2c, 0xa9, 0x40, 0x76, 0xa0, 0x7e, 0x9d, 0xd3,
	0x4c, 0x38, 0x65, 0x3c, 0x6b, 0x1d, 0xcf, 0x5a, 0xd0, 0xcf, 0x2b, 0xda, 0xb8, 0x7f, 0x18, 0x60,
	0xe2, 0x38, 0x54, 0x05, 0x8f, 0x68, 0xc8, 0x32, 0x56, 0xaa, 0xb5, 0xe2, 0x3e, 0x17, 0x43, 0x16,
	0xb0, 0x11, 0xcb, 0x9a, 0x7e, 0x01, 0xa8, 0x1d, 0x7c, 0xe7, 0x4d, 0xa4, 0x89, 0x89, 0x6b, 0x0c,
	0x2c, 0x96, 0x34, 0xc8, 0xfe, 0x47, 0x28, 0xa8, 0x02, 0x85, 0x5c, 0x08, 0x1e, 0xdd, 0xb4, 0xe3,
	0x91, 0xd0, 0xb7, 0x50, 0x84, 0xd4, 0x49, 0xb1, 0xbc, 0x65, 0x09, 0xea, 0x2d, 0xd4, 0x2f, 0x00,
	0xf2, 0x34, 0x2b, 0x5f, 0x15, 0x53, 0x5a, 0xc3, 0x94, 0x54, 0xd8, 0xc5, 0xc2, 0xfd, 0x6c, 0x40,
	0x2d, 0xc3, 0xd4, 0xa0, 0x9a, 0x26, 0x81, 0x4e, 0x46, 0x2d, 0x15, 0x2b, 0x75, 0xe8, 0x32, 0xe7,
	0x6c, 0x01, 0x59, 0x34, 0x4a, 0xb9, 0xd8, 0x28, 0x9b, 0x60, 0x8e, 0x0a, 0xa3, 0x2a, 0x15, 0xd4,
	0x6c, 0xd1, 0xed, 0x39, 0x94, 0x09, 0x8f, 0x6e, 0x74, 0x73, 0x2d, 0x83, 0xee, 0x73, 0x58, 0x3f,
	0x62, 0x92, 0xfa, 0x54, 0x52, 0xec, 0xc5, 0xf3, 0x9d, 0x45, 0x33, 0x1b, 0x85, 0x49, 0xee, 0xfe,
	0x69, 0x40, 0x23, 0xb3, 0xec, 0x49, 0x16, 0x9e, 0xef, 0x90, 0x47, 0x60, 0xf9, 0xf1, 0xe8, 0x2a,
	0x1f, 0xbe, 0xa6, 0x1f, 0x8f, 0x7a, 0x3e, 0xf9, 0x0f, 0xd4, 0x14, 0x2c, 0xd5, 0xc0, 0xc9, 0xe6,
	0x44, 0x3c, 0xc2, 0x31, 0xff, 0x1a, 0x2c, 0xf4, 0x96, 0xdd, 0xfb, 0xff, 0xb1, 0x48, 0xcb, 0x6e,
	0x5f, 0x60, 0x1c, 0xa2, 0x13, 0xc9, 0x64, 0xee, 0x69, 0xf3, 0xad, 0x01, 0xd4, 0x0b, 0xb0, 0xaa,
	0xdc, 0x1d, 0xcb, 0x9e, 0x2e, 0x6a, 0x49, 0xb6, 0xb3, 0xca, 0xa8, 0x13, 0xeb, 0xbb, 0x9b, 0x4b,
	0x8e, 0x75, 0x66, 0xba, 0x5e, 0xdf, 0x95, 0xde, 0x18, 0x6e, 0x1b, 0x1e, 0x65, 0xef, 0x21, 0x35,
	0x46, 0x7f, 0x48, 0xe8, 0x64, 0xc2, 0x92, 0xf3, 0x1d, 0xf2, 0x15, 0x58, 0xe9, 0x64, 0x45, 0xef,
	0x59, 0x1b, 0x14, 0x6d, 0xcf, 0x77, 0x3c, 0x6d, 0xe2, 0xfe, 0x66, 0x40, 0x63, 0x59, 0x45, 0x9a,
	0xc5, 0x77, 0x55, 0x7d, 0x17, 0x70, 0x7b, 0xfa, 0x13, 0xcb, 0xdf, 0x58, 0x6a, 0xd0, 0xe8, 0xae,
	0xd2, 0xf1, 0xae, 0xdf, 0x6b, 0x36, 0xaf, 0x60, 0xa2, 0x1a, 0x93, 0x4b, 0x16, 0x66, 0x45, 0xdb,
	0xf8, 0x87, 0xa2, 0x79, 0xa9, 0x05, 0x71, 0xc1, 0x1a, 0xab, 0x4e, 0x11, 0x4e, 0x05, 0x6d, 0x21,
	0x67, 0xa1, 0xf4, 0xb4, 0xc6, 0x7d, 0x0d, 0xab, 0xd9, 0x0f, 0x54, 0xc5, 0x4c, 0x9e, 0x43, 0x45,
	0x6d, 0x5e, 0xca, 0xf7, 0x9e, 0x77, 0x34, 0xd8, 0x1e, 0x03, 0xf9, 0xf4, 0x9f, 0x49, 0x56, 0xa1,
	0x76, 0xe2, 0x0d, 0x4e, 0x07, 0xfb, 0x67, 0x5d, 0xfb, 0x01, 0xa9, 0x41, 0xe5, 0xfb, 0xe1, 0xe0,
	0xd8, 0x36, 0x48, 0x15, 0xca, 0x17, 0x47, 0x7d, 0xbb, 0x44, 0x56, 0xc0, 0x54, 0xd0, 0x89, 0x5d,
	0x56, 0xd8, 0xbb, 0xa3, 0xbe, 0x5d, 0x21, 0x0d, 0x80, 0xc3, 0xce, 0xe0, 0xa0, 0x7f, 0x36, 0x3c,
	0xed, 0x78, 0xb6, 0x49, 0xea, 0x50, 0x3d, 0xec, 0x0c, 0x70, 0xa7, 0xb5, 0xbd, 0x07, 0x0f, 0x3f,
	0x79, 0xa1, 0x29, 0x2f, 0xef, 0xcf, 0x3a, 0xde, 0xa5, 0xfd, 0x40, 0x2d, 0x7b, 0xa7, 0x9d, 0xa3,
	0xa1, 0x6d, 0x10, 0x00, 0xab, 0xbb, 0x77, 0xd0, 0x39, 0x1d, 0xda, 0x25, 0xb5, 0xee, 0xef, 0x5d,
	0x0e, 0xce, 0x4e, 0xed, 0xf2, 0x76, 0x13, 0xaa, 0xfa, 0x8d, 0xa1, 0x22, 0xda, 0xdf, 0x1f, 0x5c,
	0xd8, 0x0f, 0xf4, 0x21, 0xdd, 0x5e, 0xff, 0xd4, 0x36, 0xb6, 0xbf, 0x01, 0x2b, 0xfd, 0x03, 0x2a,
	0x77, 0x6f, 0xcf, 0xda, 0xbd, 0x76, 0x1a, 0x7d, 0xaf, 0x7d, 0xd0, 0xb3, 0x0d, 0x15, 0xe0, 0xf1,
	0xde, 0x51, 0xa7, 0x7d, 0xe8, 0xed, 0x9d, 0xbc, 0xb5, 0x4b, 0xd7, 0x16, 0x3e, 0xa6, 0x5f, 0xfd,
	0x1d, 0x00, 0x00, 0xff, 0xff, 0x6a, 0xb7, 0xee, 0x1c, 0x62, 0x0b, 0x00, 0x00,
}
