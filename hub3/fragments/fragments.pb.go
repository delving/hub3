// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fragments.proto

package fragments

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ObjectType int32

const (
	ObjectType_RESOURCE ObjectType = 0
	ObjectType_LITERAL  ObjectType = 1
)

var ObjectType_name = map[int32]string{
	0: "RESOURCE",
	1: "LITERAL",
}
var ObjectType_value = map[string]int32{
	"RESOURCE": 0,
	"LITERAL":  1,
}

func (x ObjectType) String() string {
	return proto.EnumName(ObjectType_name, int32(x))
}
func (ObjectType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fragments_4d4a87347526e12b, []int{0}
}

type ObjectXSDType int32

const (
	ObjectXSDType_STRING             ObjectXSDType = 0
	ObjectXSDType_BOOLEAN            ObjectXSDType = 1
	ObjectXSDType_DECIMAL            ObjectXSDType = 2
	ObjectXSDType_FLOAT              ObjectXSDType = 3
	ObjectXSDType_DOUBLE             ObjectXSDType = 4
	ObjectXSDType_DATETIME           ObjectXSDType = 5
	ObjectXSDType_TIME               ObjectXSDType = 6
	ObjectXSDType_DATE               ObjectXSDType = 7
	ObjectXSDType_GYEARMONTH         ObjectXSDType = 8
	ObjectXSDType_GYEAR              ObjectXSDType = 9
	ObjectXSDType_GMONTHDAY          ObjectXSDType = 10
	ObjectXSDType_GDAY               ObjectXSDType = 11
	ObjectXSDType_GMONTH             ObjectXSDType = 12
	ObjectXSDType_HEXBINARY          ObjectXSDType = 13
	ObjectXSDType_BASE64BINARY       ObjectXSDType = 14
	ObjectXSDType_ANYURI             ObjectXSDType = 15
	ObjectXSDType_NORMALIZEDSTRING   ObjectXSDType = 16
	ObjectXSDType_TOKEN              ObjectXSDType = 17
	ObjectXSDType_LANGUAGE           ObjectXSDType = 18
	ObjectXSDType_NMTOKEN            ObjectXSDType = 19
	ObjectXSDType_NAME               ObjectXSDType = 20
	ObjectXSDType_NCNAME             ObjectXSDType = 21
	ObjectXSDType_INTEGER            ObjectXSDType = 22
	ObjectXSDType_NONPOSITIVEINTEGER ObjectXSDType = 23
	ObjectXSDType_NEGATIVEINTEGER    ObjectXSDType = 24
	ObjectXSDType_LONG               ObjectXSDType = 25
	ObjectXSDType_INT                ObjectXSDType = 26
	ObjectXSDType_SHORT              ObjectXSDType = 27
	ObjectXSDType_BYTE               ObjectXSDType = 28
	ObjectXSDType_NONNEGATIVEINTEGER ObjectXSDType = 29
	ObjectXSDType_UNSIGNEDLONG       ObjectXSDType = 30
	ObjectXSDType_UNSIGNEDINT        ObjectXSDType = 31
	ObjectXSDType_UNSIGNEDSHORT      ObjectXSDType = 32
	ObjectXSDType_UNSIGNEDBYTE       ObjectXSDType = 33
	ObjectXSDType_POSITIVEINTEGER    ObjectXSDType = 34
)

var ObjectXSDType_name = map[int32]string{
	0:  "STRING",
	1:  "BOOLEAN",
	2:  "DECIMAL",
	3:  "FLOAT",
	4:  "DOUBLE",
	5:  "DATETIME",
	6:  "TIME",
	7:  "DATE",
	8:  "GYEARMONTH",
	9:  "GYEAR",
	10: "GMONTHDAY",
	11: "GDAY",
	12: "GMONTH",
	13: "HEXBINARY",
	14: "BASE64BINARY",
	15: "ANYURI",
	16: "NORMALIZEDSTRING",
	17: "TOKEN",
	18: "LANGUAGE",
	19: "NMTOKEN",
	20: "NAME",
	21: "NCNAME",
	22: "INTEGER",
	23: "NONPOSITIVEINTEGER",
	24: "NEGATIVEINTEGER",
	25: "LONG",
	26: "INT",
	27: "SHORT",
	28: "BYTE",
	29: "NONNEGATIVEINTEGER",
	30: "UNSIGNEDLONG",
	31: "UNSIGNEDINT",
	32: "UNSIGNEDSHORT",
	33: "UNSIGNEDBYTE",
	34: "POSITIVEINTEGER",
}
var ObjectXSDType_value = map[string]int32{
	"STRING":             0,
	"BOOLEAN":            1,
	"DECIMAL":            2,
	"FLOAT":              3,
	"DOUBLE":             4,
	"DATETIME":           5,
	"TIME":               6,
	"DATE":               7,
	"GYEARMONTH":         8,
	"GYEAR":              9,
	"GMONTHDAY":          10,
	"GDAY":               11,
	"GMONTH":             12,
	"HEXBINARY":          13,
	"BASE64BINARY":       14,
	"ANYURI":             15,
	"NORMALIZEDSTRING":   16,
	"TOKEN":              17,
	"LANGUAGE":           18,
	"NMTOKEN":            19,
	"NAME":               20,
	"NCNAME":             21,
	"INTEGER":            22,
	"NONPOSITIVEINTEGER": 23,
	"NEGATIVEINTEGER":    24,
	"LONG":               25,
	"INT":                26,
	"SHORT":              27,
	"BYTE":               28,
	"NONNEGATIVEINTEGER": 29,
	"UNSIGNEDLONG":       30,
	"UNSIGNEDINT":        31,
	"UNSIGNEDSHORT":      32,
	"UNSIGNEDBYTE":       33,
	"POSITIVEINTEGER":    34,
}

func (x ObjectXSDType) String() string {
	return proto.EnumName(ObjectXSDType_name, int32(x))
}
func (ObjectXSDType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fragments_4d4a87347526e12b, []int{1}
}

type RecordType int32

const (
	RecordType_NARTHEX    RecordType = 0
	RecordType_SCHEMA     RecordType = 1
	RecordType_VOCABULARY RecordType = 2
	RecordType_SOURCE     RecordType = 3
	RecordType_CACHE      RecordType = 4
)

var RecordType_name = map[int32]string{
	0: "NARTHEX",
	1: "SCHEMA",
	2: "VOCABULARY",
	3: "SOURCE",
	4: "CACHE",
}
var RecordType_value = map[string]int32{
	"NARTHEX":    0,
	"SCHEMA":     1,
	"VOCABULARY": 2,
	"SOURCE":     3,
	"CACHE":      4,
}

func (x RecordType) String() string {
	return proto.EnumName(RecordType_name, int32(x))
}
func (RecordType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fragments_4d4a87347526e12b, []int{2}
}

type FragmentSearchResponse struct {
	Request              *FragmentRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	NrTriples            int32            `protobuf:"varint,2,opt,name=nrTriples" json:"nrTriples,omitempty"`
	Page                 int32            `protobuf:"varint,3,opt,name=page" json:"page,omitempty"`
	Fragments            []*Fragment      `protobuf:"bytes,4,rep,name=fragments" json:"fragments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *FragmentSearchResponse) Reset()         { *m = FragmentSearchResponse{} }
func (m *FragmentSearchResponse) String() string { return proto.CompactTextString(m) }
func (*FragmentSearchResponse) ProtoMessage()    {}
func (*FragmentSearchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fragments_4d4a87347526e12b, []int{0}
}
func (m *FragmentSearchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FragmentSearchResponse.Unmarshal(m, b)
}
func (m *FragmentSearchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FragmentSearchResponse.Marshal(b, m, deterministic)
}
func (dst *FragmentSearchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FragmentSearchResponse.Merge(dst, src)
}
func (m *FragmentSearchResponse) XXX_Size() int {
	return xxx_messageInfo_FragmentSearchResponse.Size(m)
}
func (m *FragmentSearchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FragmentSearchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FragmentSearchResponse proto.InternalMessageInfo

func (m *FragmentSearchResponse) GetRequest() *FragmentRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *FragmentSearchResponse) GetNrTriples() int32 {
	if m != nil {
		return m.NrTriples
	}
	return 0
}

func (m *FragmentSearchResponse) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *FragmentSearchResponse) GetFragments() []*Fragment {
	if m != nil {
		return m.Fragments
	}
	return nil
}

type FragmentUpdateResponse struct {
	GraphsStored         int32            `protobuf:"varint,1,opt,name=graphsStored" json:"graphsStored,omitempty"`
	Spec                 string           `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	HasErrors            bool             `protobuf:"varint,3,opt,name=hasErrors" json:"hasErrors,omitempty"`
	Errors               []*FragmentError `protobuf:"bytes,4,rep,name=errors" json:"errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *FragmentUpdateResponse) Reset()         { *m = FragmentUpdateResponse{} }
func (m *FragmentUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*FragmentUpdateResponse) ProtoMessage()    {}
func (*FragmentUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fragments_4d4a87347526e12b, []int{1}
}
func (m *FragmentUpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FragmentUpdateResponse.Unmarshal(m, b)
}
func (m *FragmentUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FragmentUpdateResponse.Marshal(b, m, deterministic)
}
func (dst *FragmentUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FragmentUpdateResponse.Merge(dst, src)
}
func (m *FragmentUpdateResponse) XXX_Size() int {
	return xxx_messageInfo_FragmentUpdateResponse.Size(m)
}
func (m *FragmentUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FragmentUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FragmentUpdateResponse proto.InternalMessageInfo

func (m *FragmentUpdateResponse) GetGraphsStored() int32 {
	if m != nil {
		return m.GraphsStored
	}
	return 0
}

func (m *FragmentUpdateResponse) GetSpec() string {
	if m != nil {
		return m.Spec
	}
	return ""
}

func (m *FragmentUpdateResponse) GetHasErrors() bool {
	if m != nil {
		return m.HasErrors
	}
	return false
}

func (m *FragmentUpdateResponse) GetErrors() []*FragmentError {
	if m != nil {
		return m.Errors
	}
	return nil
}

type FragmentError struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FragmentError) Reset()         { *m = FragmentError{} }
func (m *FragmentError) String() string { return proto.CompactTextString(m) }
func (*FragmentError) ProtoMessage()    {}
func (*FragmentError) Descriptor() ([]byte, []int) {
	return fileDescriptor_fragments_4d4a87347526e12b, []int{2}
}
func (m *FragmentError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FragmentError.Unmarshal(m, b)
}
func (m *FragmentError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FragmentError.Marshal(b, m, deterministic)
}
func (dst *FragmentError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FragmentError.Merge(dst, src)
}
func (m *FragmentError) XXX_Size() int {
	return xxx_messageInfo_FragmentError.Size(m)
}
func (m *FragmentError) XXX_DiscardUnknown() {
	xxx_messageInfo_FragmentError.DiscardUnknown(m)
}

var xxx_messageInfo_FragmentError proto.InternalMessageInfo

type FragmentRequest struct {
	Subject              string   `protobuf:"bytes,1,opt,name=subject" json:"subject,omitempty"`
	Predicate            string   `protobuf:"bytes,2,opt,name=predicate" json:"predicate,omitempty"`
	Object               string   `protobuf:"bytes,3,opt,name=object" json:"object,omitempty"`
	Page                 int32    `protobuf:"varint,4,opt,name=page" json:"page,omitempty"`
	Language             string   `protobuf:"bytes,5,opt,name=language" json:"language,omitempty"`
	OrgID                string   `protobuf:"bytes,6,opt,name=orgID" json:"orgID,omitempty"`
	Graph                string   `protobuf:"bytes,7,opt,name=graph" json:"graph,omitempty"`
	Spec                 string   `protobuf:"bytes,8,opt,name=spec" json:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FragmentRequest) Reset()         { *m = FragmentRequest{} }
func (m *FragmentRequest) String() string { return proto.CompactTextString(m) }
func (*FragmentRequest) ProtoMessage()    {}
func (*FragmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fragments_4d4a87347526e12b, []int{3}
}
func (m *FragmentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FragmentRequest.Unmarshal(m, b)
}
func (m *FragmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FragmentRequest.Marshal(b, m, deterministic)
}
func (dst *FragmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FragmentRequest.Merge(dst, src)
}
func (m *FragmentRequest) XXX_Size() int {
	return xxx_messageInfo_FragmentRequest.Size(m)
}
func (m *FragmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FragmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FragmentRequest proto.InternalMessageInfo

func (m *FragmentRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *FragmentRequest) GetPredicate() string {
	if m != nil {
		return m.Predicate
	}
	return ""
}

func (m *FragmentRequest) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *FragmentRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *FragmentRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *FragmentRequest) GetOrgID() string {
	if m != nil {
		return m.OrgID
	}
	return ""
}

func (m *FragmentRequest) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func (m *FragmentRequest) GetSpec() string {
	if m != nil {
		return m.Spec
	}
	return ""
}

type FragmentGraph struct {
	OrgID                string      `protobuf:"bytes,1,opt,name=orgID" json:"orgID,omitempty"`
	Spec                 string      `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Revision             int32       `protobuf:"varint,3,opt,name=revision" json:"revision,omitempty"`
	HubID                string      `protobuf:"bytes,4,opt,name=hubID" json:"hubID,omitempty"`
	EntryURI             string      `protobuf:"bytes,5,opt,name=entryURI" json:"entryURI,omitempty"`
	NamedGraphURI        string      `protobuf:"bytes,6,opt,name=namedGraphURI" json:"namedGraphURI,omitempty"`
	RDF                  []byte      `protobuf:"bytes,7,opt,name=RDF,proto3" json:"RDF,omitempty"`
	RdfMimeType          string      `protobuf:"bytes,8,opt,name=rdfMimeType" json:"rdfMimeType,omitempty"`
	RecordType           RecordType  `protobuf:"varint,9,opt,name=recordType,enum=fragments.RecordType" json:"recordType,omitempty"`
	Fragments            []*Fragment `protobuf:"bytes,10,rep,name=fragments" json:"fragments,omitempty"`
	Tags                 []string    `protobuf:"bytes,11,rep,name=tags" json:"tags,omitempty"`
	DocType              string      `protobuf:"bytes,12,opt,name=docType" json:"docType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FragmentGraph) Reset()         { *m = FragmentGraph{} }
func (m *FragmentGraph) String() string { return proto.CompactTextString(m) }
func (*FragmentGraph) ProtoMessage()    {}
func (*FragmentGraph) Descriptor() ([]byte, []int) {
	return fileDescriptor_fragments_4d4a87347526e12b, []int{4}
}
func (m *FragmentGraph) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FragmentGraph.Unmarshal(m, b)
}
func (m *FragmentGraph) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FragmentGraph.Marshal(b, m, deterministic)
}
func (dst *FragmentGraph) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FragmentGraph.Merge(dst, src)
}
func (m *FragmentGraph) XXX_Size() int {
	return xxx_messageInfo_FragmentGraph.Size(m)
}
func (m *FragmentGraph) XXX_DiscardUnknown() {
	xxx_messageInfo_FragmentGraph.DiscardUnknown(m)
}

var xxx_messageInfo_FragmentGraph proto.InternalMessageInfo

func (m *FragmentGraph) GetOrgID() string {
	if m != nil {
		return m.OrgID
	}
	return ""
}

func (m *FragmentGraph) GetSpec() string {
	if m != nil {
		return m.Spec
	}
	return ""
}

func (m *FragmentGraph) GetRevision() int32 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *FragmentGraph) GetHubID() string {
	if m != nil {
		return m.HubID
	}
	return ""
}

func (m *FragmentGraph) GetEntryURI() string {
	if m != nil {
		return m.EntryURI
	}
	return ""
}

func (m *FragmentGraph) GetNamedGraphURI() string {
	if m != nil {
		return m.NamedGraphURI
	}
	return ""
}

func (m *FragmentGraph) GetRDF() []byte {
	if m != nil {
		return m.RDF
	}
	return nil
}

func (m *FragmentGraph) GetRdfMimeType() string {
	if m != nil {
		return m.RdfMimeType
	}
	return ""
}

func (m *FragmentGraph) GetRecordType() RecordType {
	if m != nil {
		return m.RecordType
	}
	return RecordType_NARTHEX
}

func (m *FragmentGraph) GetFragments() []*Fragment {
	if m != nil {
		return m.Fragments
	}
	return nil
}

func (m *FragmentGraph) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *FragmentGraph) GetDocType() string {
	if m != nil {
		return m.DocType
	}
	return ""
}

type Fragment struct {
	// meta block
	OrgID    string `protobuf:"bytes,1,opt,name=orgID" json:"orgID,omitempty"`
	Spec     string `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Revision int32  `protobuf:"varint,3,opt,name=revision" json:"revision,omitempty"`
	HubID    string `protobuf:"bytes,4,opt,name=hubID" json:"hubID,omitempty"`
	// RDF core
	Subject           string        `protobuf:"bytes,5,opt,name=subject" json:"subject,omitempty"`
	SubjectClass      []string      `protobuf:"bytes,6,rep,name=subjectClass" json:"subjectClass,omitempty"`
	Predicate         string        `protobuf:"bytes,7,opt,name=predicate" json:"predicate,omitempty"`
	SearchLabel       string        `protobuf:"bytes,8,opt,name=searchLabel" json:"searchLabel,omitempty"`
	Object            string        `protobuf:"bytes,9,opt,name=object" json:"object,omitempty"`
	ObjectType        ObjectType    `protobuf:"varint,10,opt,name=objectType,enum=fragments.ObjectType" json:"objectType,omitempty"`
	Language          string        `protobuf:"bytes,11,opt,name=language" json:"language,omitempty"`
	ObjectContentType string        `protobuf:"bytes,12,opt,name=objectContentType" json:"objectContentType,omitempty"`
	DataType          ObjectXSDType `protobuf:"varint,13,opt,name=dataType,enum=fragments.ObjectXSDType" json:"dataType,omitempty"`
	XSDRaw            string        `protobuf:"bytes,14,opt,name=XSDRaw" json:"XSDRaw,omitempty"`
	ObjectTypeRaw     string        `protobuf:"bytes,29,opt,name=objectTypeRaw" json:"objectTypeRaw,omitempty"`
	NamedGraphURI     string        `protobuf:"bytes,15,opt,name=namedGraphURI" json:"namedGraphURI,omitempty"`
	Triple            string        `protobuf:"bytes,16,opt,name=triple" json:"triple,omitempty"`
	// RDF graph position
	Level                int32    `protobuf:"varint,17,opt,name=level" json:"level,omitempty"`
	ReferrerSubject      string   `protobuf:"bytes,18,opt,name=referrerSubject" json:"referrerSubject,omitempty"`
	ReferrerPredicate    string   `protobuf:"bytes,19,opt,name=referrerPredicate" json:"referrerPredicate,omitempty"`
	ReferrerSearchLabel  string   `protobuf:"bytes,20,opt,name=referrerSearchLabel" json:"referrerSearchLabel,omitempty"`
	ReferrerSubjectClass []string `protobuf:"bytes,21,rep,name=referrerSubjectClass" json:"referrerSubjectClass,omitempty"`
	// Content Index
	LatLong                   string `protobuf:"bytes,22,opt,name=latLong" json:"latLong,omitempty"`
	Date                      string `protobuf:"bytes,23,opt,name=date" json:"date,omitempty"`
	DateRange                 string `protobuf:"bytes,24,opt,name=dateRange" json:"dateRange,omitempty"`
	Integer                   int32  `protobuf:"varint,25,opt,name=integer" json:"integer,omitempty"`
	IntegerRange              int32  `protobuf:"varint,26,opt,name=integerRange" json:"integerRange,omitempty"`
	ReferrerResourceSortOrder int32  `protobuf:"varint,27,opt,name=referrerResourceSortOrder" json:"referrerResourceSortOrder,omitempty"`
	// content tags
	// example values linkGraphExternal prefLabel linkDomainExternal thumbnail date
	Tags                 []string `protobuf:"bytes,28,rep,name=tags" json:"tags,omitempty"`
	DocType              string   `protobuf:"bytes,30,opt,name=docType" json:"docType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Fragment) Reset()         { *m = Fragment{} }
func (m *Fragment) String() string { return proto.CompactTextString(m) }
func (*Fragment) ProtoMessage()    {}
func (*Fragment) Descriptor() ([]byte, []int) {
	return fileDescriptor_fragments_4d4a87347526e12b, []int{5}
}
func (m *Fragment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Fragment.Unmarshal(m, b)
}
func (m *Fragment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Fragment.Marshal(b, m, deterministic)
}
func (dst *Fragment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fragment.Merge(dst, src)
}
func (m *Fragment) XXX_Size() int {
	return xxx_messageInfo_Fragment.Size(m)
}
func (m *Fragment) XXX_DiscardUnknown() {
	xxx_messageInfo_Fragment.DiscardUnknown(m)
}

var xxx_messageInfo_Fragment proto.InternalMessageInfo

func (m *Fragment) GetOrgID() string {
	if m != nil {
		return m.OrgID
	}
	return ""
}

func (m *Fragment) GetSpec() string {
	if m != nil {
		return m.Spec
	}
	return ""
}

func (m *Fragment) GetRevision() int32 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *Fragment) GetHubID() string {
	if m != nil {
		return m.HubID
	}
	return ""
}

func (m *Fragment) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *Fragment) GetSubjectClass() []string {
	if m != nil {
		return m.SubjectClass
	}
	return nil
}

func (m *Fragment) GetPredicate() string {
	if m != nil {
		return m.Predicate
	}
	return ""
}

func (m *Fragment) GetSearchLabel() string {
	if m != nil {
		return m.SearchLabel
	}
	return ""
}

func (m *Fragment) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *Fragment) GetObjectType() ObjectType {
	if m != nil {
		return m.ObjectType
	}
	return ObjectType_RESOURCE
}

func (m *Fragment) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Fragment) GetObjectContentType() string {
	if m != nil {
		return m.ObjectContentType
	}
	return ""
}

func (m *Fragment) GetDataType() ObjectXSDType {
	if m != nil {
		return m.DataType
	}
	return ObjectXSDType_STRING
}

func (m *Fragment) GetXSDRaw() string {
	if m != nil {
		return m.XSDRaw
	}
	return ""
}

func (m *Fragment) GetObjectTypeRaw() string {
	if m != nil {
		return m.ObjectTypeRaw
	}
	return ""
}

func (m *Fragment) GetNamedGraphURI() string {
	if m != nil {
		return m.NamedGraphURI
	}
	return ""
}

func (m *Fragment) GetTriple() string {
	if m != nil {
		return m.Triple
	}
	return ""
}

func (m *Fragment) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Fragment) GetReferrerSubject() string {
	if m != nil {
		return m.ReferrerSubject
	}
	return ""
}

func (m *Fragment) GetReferrerPredicate() string {
	if m != nil {
		return m.ReferrerPredicate
	}
	return ""
}

func (m *Fragment) GetReferrerSearchLabel() string {
	if m != nil {
		return m.ReferrerSearchLabel
	}
	return ""
}

func (m *Fragment) GetReferrerSubjectClass() []string {
	if m != nil {
		return m.ReferrerSubjectClass
	}
	return nil
}

func (m *Fragment) GetLatLong() string {
	if m != nil {
		return m.LatLong
	}
	return ""
}

func (m *Fragment) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *Fragment) GetDateRange() string {
	if m != nil {
		return m.DateRange
	}
	return ""
}

func (m *Fragment) GetInteger() int32 {
	if m != nil {
		return m.Integer
	}
	return 0
}

func (m *Fragment) GetIntegerRange() int32 {
	if m != nil {
		return m.IntegerRange
	}
	return 0
}

func (m *Fragment) GetReferrerResourceSortOrder() int32 {
	if m != nil {
		return m.ReferrerResourceSortOrder
	}
	return 0
}

func (m *Fragment) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Fragment) GetDocType() string {
	if m != nil {
		return m.DocType
	}
	return ""
}

func init() {
	proto.RegisterType((*FragmentSearchResponse)(nil), "fragments.FragmentSearchResponse")
	proto.RegisterType((*FragmentUpdateResponse)(nil), "fragments.FragmentUpdateResponse")
	proto.RegisterType((*FragmentError)(nil), "fragments.FragmentError")
	proto.RegisterType((*FragmentRequest)(nil), "fragments.FragmentRequest")
	proto.RegisterType((*FragmentGraph)(nil), "fragments.FragmentGraph")
	proto.RegisterType((*Fragment)(nil), "fragments.Fragment")
	proto.RegisterEnum("fragments.ObjectType", ObjectType_name, ObjectType_value)
	proto.RegisterEnum("fragments.ObjectXSDType", ObjectXSDType_name, ObjectXSDType_value)
	proto.RegisterEnum("fragments.RecordType", RecordType_name, RecordType_value)
}

func init() { proto.RegisterFile("fragments.proto", fileDescriptor_fragments_4d4a87347526e12b) }

var fileDescriptor_fragments_4d4a87347526e12b = []byte{
	// 1188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcf, 0x6e, 0xdb, 0xc6,
	0x13, 0x8e, 0xac, 0xff, 0x23, 0xc9, 0x5a, 0xaf, 0x1d, 0x87, 0x71, 0xfe, 0xfc, 0x14, 0xe1, 0x07,
	0xd4, 0x08, 0x8a, 0x20, 0x75, 0x93, 0x9e, 0x7a, 0xa1, 0xa5, 0x8d, 0x4c, 0x94, 0x22, 0x83, 0x25,
	0x15, 0xd8, 0xbd, 0xd1, 0xd2, 0x46, 0x56, 0xa1, 0x88, 0xea, 0x92, 0x76, 0x91, 0x7b, 0x1f, 0xa4,
	0x7d, 0x86, 0x3e, 0x49, 0x1f, 0x27, 0xb7, 0x62, 0x76, 0x49, 0x8a, 0x94, 0xd5, 0xa2, 0x97, 0xde,
	0x66, 0xbe, 0x99, 0x9d, 0xfd, 0x66, 0xf6, 0x5b, 0x72, 0xa1, 0xfb, 0x51, 0x06, 0xf3, 0x4f, 0x62,
	0x15, 0x47, 0xaf, 0xd6, 0x32, 0x8c, 0x43, 0xda, 0xcc, 0x80, 0xfe, 0x1f, 0x25, 0x38, 0x7e, 0x97,
	0x78, 0x9e, 0x08, 0xe4, 0xf4, 0x86, 0x8b, 0x68, 0x1d, 0xae, 0x22, 0x41, 0xdf, 0x40, 0x5d, 0x8a,
	0x9f, 0x6f, 0x45, 0x14, 0x1b, 0xa5, 0x5e, 0xe9, 0xb4, 0x75, 0x76, 0xf2, 0x6a, 0x53, 0x28, 0x5d,
	0xc3, 0x75, 0x06, 0x4f, 0x53, 0xe9, 0x53, 0x68, 0xae, 0xa4, 0x2f, 0x17, 0xeb, 0xa5, 0x88, 0x8c,
	0xbd, 0x5e, 0xe9, 0xb4, 0xca, 0x37, 0x00, 0xa5, 0x50, 0x59, 0x07, 0x73, 0x61, 0x94, 0x55, 0x40,
	0xd9, 0xf4, 0x1b, 0xd8, 0xf0, 0x31, 0x2a, 0xbd, 0xf2, 0x69, 0xeb, 0xec, 0x70, 0xd7, 0x4e, 0x39,
	0xd6, 0xbf, 0xe5, 0x58, 0x4f, 0xd6, 0xb3, 0x20, 0x16, 0x19, 0xeb, 0x3e, 0xb4, 0xe7, 0x32, 0x58,
	0xdf, 0x44, 0x5e, 0x1c, 0x4a, 0x31, 0x53, 0xd4, 0xab, 0xbc, 0x80, 0x21, 0x8b, 0x68, 0x2d, 0xa6,
	0x8a, 0x5e, 0x93, 0x2b, 0x1b, 0x79, 0xdf, 0x04, 0x11, 0x93, 0x32, 0x94, 0x91, 0xa2, 0xd7, 0xe0,
	0x1b, 0x80, 0xbe, 0x86, 0x9a, 0xd0, 0x21, 0x4d, 0xd0, 0xd8, 0x41, 0x50, 0xa5, 0xf2, 0x24, 0xaf,
	0xdf, 0x85, 0x4e, 0x21, 0xd0, 0xff, 0xb3, 0x04, 0xdd, 0xad, 0xa9, 0x51, 0x03, 0xea, 0xd1, 0xed,
	0xf5, 0x4f, 0x62, 0xaa, 0x47, 0xdc, 0xe4, 0xa9, 0x8b, 0x74, 0xd6, 0x52, 0xcc, 0x16, 0xd3, 0x20,
	0x16, 0x09, 0xcf, 0x0d, 0x40, 0x8f, 0xa1, 0x16, 0xea, 0x65, 0x65, 0x15, 0x4a, 0xbc, 0x6c, 0xbc,
	0x95, 0xdc, 0x78, 0x4f, 0xa0, 0xb1, 0x0c, 0x56, 0xf3, 0x5b, 0xc4, 0xab, 0x2a, 0x3b, 0xf3, 0xe9,
	0x11, 0x54, 0x43, 0x39, 0xb7, 0x86, 0x46, 0x4d, 0x05, 0xb4, 0x83, 0xa8, 0x1a, 0x97, 0x51, 0xd7,
	0xa8, 0x72, 0xb2, 0xa1, 0x35, 0x36, 0x43, 0xeb, 0x7f, 0xd9, 0xdb, 0x74, 0x39, 0x52, 0x59, 0x59,
	0xc5, 0x52, 0xbe, 0xe2, 0xae, 0x81, 0x9f, 0x40, 0x43, 0x8a, 0xbb, 0x45, 0xb4, 0x08, 0x57, 0x89,
	0x1c, 0x32, 0x1f, 0xab, 0xdc, 0xdc, 0x5e, 0x5b, 0x43, 0xd5, 0x48, 0x93, 0x6b, 0x07, 0x57, 0x88,
	0x55, 0x2c, 0x3f, 0x4f, 0xb8, 0x95, 0x76, 0x92, 0xfa, 0xf4, 0xff, 0xd0, 0x59, 0x05, 0x9f, 0xc4,
	0x4c, 0xb1, 0xc0, 0x04, 0xdd, 0x51, 0x11, 0xa4, 0x04, 0xca, 0x7c, 0xf8, 0x4e, 0xf5, 0xd5, 0xe6,
	0x68, 0xd2, 0x1e, 0xb4, 0xe4, 0xec, 0xe3, 0x78, 0xf1, 0x49, 0xf8, 0x9f, 0xd7, 0x22, 0x69, 0x2e,
	0x0f, 0xd1, 0xb7, 0x00, 0x52, 0x4c, 0x43, 0x39, 0x53, 0x09, 0xcd, 0x5e, 0xe9, 0x74, 0xff, 0xec,
	0x61, 0xee, 0xf8, 0x79, 0x16, 0xe4, 0xb9, 0xc4, 0xa2, 0xaa, 0xe1, 0xdf, 0xa8, 0x1a, 0xa7, 0x14,
	0x07, 0xf3, 0xc8, 0x68, 0xf5, 0xca, 0x38, 0x25, 0xb4, 0x51, 0x21, 0xb3, 0x70, 0xaa, 0xb6, 0x6e,
	0x6b, 0x85, 0x24, 0x6e, 0xff, 0x4b, 0x1d, 0x1a, 0x69, 0x95, 0xff, 0x74, 0xec, 0x39, 0x91, 0x56,
	0x8b, 0x22, 0xed, 0x43, 0x3b, 0x31, 0x07, 0xcb, 0x20, 0x8a, 0x8c, 0x9a, 0x22, 0x5e, 0xc0, 0x8a,
	0x42, 0xae, 0x6f, 0x0b, 0xb9, 0x07, 0xad, 0x48, 0x7d, 0x75, 0xec, 0xe0, 0x5a, 0x2c, 0xd3, 0xf1,
	0xe7, 0xa0, 0x9c, 0xd4, 0x9b, 0x05, 0xa9, 0xbf, 0x05, 0xd0, 0x96, 0x9a, 0x0d, 0xdc, 0x3b, 0x16,
	0x37, 0x0b, 0xf2, 0x5c, 0x62, 0xe1, 0x36, 0xb4, 0xb6, 0x6e, 0xc3, 0xd7, 0x70, 0xa0, 0x33, 0x07,
	0xe1, 0x2a, 0x16, 0xab, 0x38, 0x37, 0xf5, 0xfb, 0x01, 0xfa, 0x06, 0x1a, 0xb3, 0x20, 0x0e, 0x54,
	0x52, 0x47, 0x6d, 0x6f, 0xdc, 0xdb, 0xfe, 0xd2, 0x1b, 0x2a, 0x06, 0x59, 0x26, 0xb6, 0x73, 0xe9,
	0x0d, 0x79, 0xf0, 0x8b, 0xb1, 0xaf, 0xdb, 0xd1, 0x1e, 0xea, 0x77, 0xc3, 0x12, 0xc3, 0xcf, 0xb4,
	0x7e, 0x0b, 0xe0, 0x7d, 0x95, 0x77, 0x77, 0xa9, 0xfc, 0x18, 0x6a, 0xb1, 0xfa, 0xde, 0x1a, 0x44,
	0xef, 0xa1, 0x3d, 0x3c, 0xde, 0xa5, 0xb8, 0x13, 0x4b, 0xe3, 0x40, 0x9d, 0xbb, 0x76, 0xe8, 0x29,
	0x74, 0xa5, 0xf8, 0x28, 0xa4, 0x14, 0xd2, 0x4b, 0x8e, 0x99, 0xaa, 0x65, 0xdb, 0x30, 0xce, 0x27,
	0x85, 0xde, 0x67, 0x47, 0x7a, 0xa8, 0xe7, 0x73, 0x2f, 0x40, 0x5f, 0xc3, 0x61, 0x56, 0x20, 0x77,
	0xc4, 0x47, 0x2a, 0x7f, 0x57, 0x88, 0x9e, 0xc1, 0xd1, 0xd6, 0x96, 0x5a, 0x56, 0x0f, 0x95, 0xac,
	0x76, 0xc6, 0x50, 0x9c, 0xcb, 0x20, 0xb6, 0xc3, 0xd5, 0xdc, 0x38, 0xd6, 0xe2, 0x4c, 0x5c, 0x14,
	0x3f, 0xfe, 0x18, 0x8c, 0x47, 0x5a, 0xfc, 0x68, 0xa3, 0x18, 0xd5, 0xcf, 0x22, 0x58, 0xcd, 0x85,
	0x61, 0x68, 0x31, 0x66, 0x00, 0xd6, 0x5a, 0xac, 0x62, 0x31, 0x17, 0xd2, 0x78, 0xac, 0x26, 0x94,
	0xba, 0x28, 0xf4, 0xc4, 0xd4, 0x4b, 0x4f, 0xf4, 0x4f, 0x25, 0x8f, 0xd1, 0xef, 0xe1, 0x71, 0xca,
	0x90, 0x8b, 0x28, 0xbc, 0x95, 0x53, 0xe1, 0x85, 0x32, 0x76, 0xe5, 0x4c, 0x48, 0xe3, 0x89, 0x5a,
	0xf0, 0xf7, 0x09, 0xd9, 0xdd, 0x7f, 0xba, 0xfb, 0xee, 0x3f, 0x2f, 0xdc, 0xfd, 0x97, 0x5f, 0x01,
	0x6c, 0xf4, 0x4d, 0xdb, 0xd0, 0xe0, 0xcc, 0x73, 0x27, 0x7c, 0xc0, 0xc8, 0x03, 0xda, 0x82, 0xba,
	0x6d, 0xf9, 0x8c, 0x9b, 0x36, 0x29, 0xbd, 0xfc, 0xb5, 0x02, 0x9d, 0x82, 0x14, 0x29, 0x40, 0xcd,
	0xf3, 0xb9, 0xe5, 0x8c, 0x74, 0xea, 0xb9, 0xeb, 0xda, 0xcc, 0x74, 0x48, 0x09, 0x9d, 0x21, 0x1b,
	0x58, 0x63, 0xd3, 0x26, 0x7b, 0xb4, 0x09, 0xd5, 0x77, 0xb6, 0x6b, 0xfa, 0xa4, 0x8c, 0x0b, 0x86,
	0xee, 0xe4, 0xdc, 0x66, 0xa4, 0x82, 0x3b, 0x0d, 0x4d, 0x9f, 0xf9, 0xd6, 0x98, 0x91, 0x2a, 0x6d,
	0x40, 0x45, 0x59, 0x35, 0xb4, 0x10, 0x27, 0x75, 0xba, 0x0f, 0x30, 0xba, 0x62, 0x26, 0x1f, 0xbb,
	0x8e, 0x7f, 0x41, 0x1a, 0x58, 0x48, 0xf9, 0xa4, 0x49, 0x3b, 0xd0, 0x1c, 0x29, 0x78, 0x68, 0x5e,
	0x11, 0xc0, 0x35, 0x23, 0xb4, 0x5a, 0xb8, 0x83, 0x0e, 0x90, 0x36, 0x26, 0x5d, 0xb0, 0xcb, 0x73,
	0xcb, 0x31, 0xf9, 0x15, 0xe9, 0x50, 0x02, 0xed, 0x73, 0xd3, 0x63, 0xdf, 0xbd, 0x49, 0x90, 0x7d,
	0x4c, 0x36, 0x9d, 0xab, 0x09, 0xb7, 0x48, 0x97, 0x1e, 0x01, 0x71, 0x5c, 0x3e, 0x36, 0x6d, 0xeb,
	0x47, 0x36, 0x4c, 0xba, 0x22, 0xb8, 0xa5, 0xef, 0xfe, 0xc0, 0x1c, 0x72, 0x80, 0x7c, 0x6d, 0xd3,
	0x19, 0x4d, 0xcc, 0x11, 0x23, 0x14, 0x3b, 0x74, 0xc6, 0x3a, 0x74, 0x88, 0xdb, 0x3b, 0xe6, 0x98,
	0x91, 0x23, 0xac, 0xe8, 0x0c, 0x94, 0xfd, 0x10, 0x53, 0x2c, 0xc7, 0x67, 0x23, 0xc6, 0xc9, 0x31,
	0x3d, 0x06, 0xea, 0xb8, 0xce, 0x7b, 0xd7, 0xb3, 0x7c, 0xeb, 0x03, 0x4b, 0xf1, 0x47, 0xf4, 0x10,
	0xba, 0x0e, 0x1b, 0x99, 0x79, 0xd0, 0xc0, 0x7a, 0xb6, 0xeb, 0x8c, 0xc8, 0x63, 0x5a, 0x87, 0xb2,
	0xe5, 0xf8, 0xe4, 0x04, 0x89, 0x78, 0x17, 0x2e, 0xf7, 0xc9, 0x13, 0x8c, 0x9e, 0x5f, 0xf9, 0x8c,
	0x3c, 0x4d, 0x8a, 0x6e, 0xaf, 0x7f, 0x86, 0x9d, 0x4e, 0x1c, 0xcf, 0x1a, 0x39, 0x6c, 0xa8, 0xea,
	0x3c, 0xa7, 0x5d, 0x68, 0xa5, 0x08, 0xd6, 0xfb, 0x1f, 0x3d, 0x80, 0x4e, 0x0a, 0xe8, 0xba, 0xbd,
	0xfc, 0x2a, 0x55, 0xff, 0x05, 0x92, 0xdb, 0x66, 0xdc, 0x7f, 0x69, 0x03, 0x6c, 0x7e, 0x53, 0x6a,
	0x0e, 0x26, 0xf7, 0x2f, 0xd8, 0x25, 0x79, 0xa0, 0xf4, 0x30, 0xb8, 0x60, 0x63, 0x93, 0x94, 0xf0,
	0xf0, 0x3e, 0xb8, 0x03, 0xf3, 0x7c, 0x62, 0xe3, 0xac, 0xf7, 0x54, 0x4c, 0xcb, 0xaa, 0x8c, 0xcd,
	0x0c, 0xcc, 0xc1, 0x05, 0x23, 0x95, 0xb3, 0xdf, 0x73, 0x2f, 0x19, 0x4f, 0xc8, 0xbb, 0xc5, 0x54,
	0xd0, 0x11, 0xd4, 0xf4, 0x55, 0xa6, 0xff, 0xf0, 0x4a, 0x3c, 0x79, 0xb1, 0x23, 0xb6, 0xf5, 0xea,
	0x64, 0x50, 0xd3, 0x2f, 0x3a, 0xba, 0xeb, 0x8d, 0xa5, 0xbe, 0x71, 0x3b, 0xcb, 0x14, 0x9f, 0x81,
	0xd7, 0x35, 0xf5, 0xd2, 0xfd, 0xf6, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x95, 0xe8, 0x66,
	0xfc, 0x0a, 0x00, 0x00,
}
