// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hub3/fragments/fragments.proto

/*
Package fragments is a generated protocol buffer package.

It is generated from these files:
	hub3/fragments/fragments.proto

It has these top-level messages:
	FragmentResponse
	FragmentRequest
	Fragment
*/
package fragments

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ObjectType int32

const (
	ObjectType_RESOURCE ObjectType = 0
	ObjectType_LITERAL  ObjectType = 1
)

var ObjectType_name = map[int32]string{
	0: "RESOURCE",
	1: "LITERAL",
}
var ObjectType_value = map[string]int32{
	"RESOURCE": 0,
	"LITERAL":  1,
}

func (x ObjectType) String() string {
	return proto.EnumName(ObjectType_name, int32(x))
}
func (ObjectType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ObjectXSDType int32

const (
	ObjectXSDType_STRING             ObjectXSDType = 0
	ObjectXSDType_BOOLEAN            ObjectXSDType = 1
	ObjectXSDType_DECIMAL            ObjectXSDType = 2
	ObjectXSDType_FLOAT              ObjectXSDType = 3
	ObjectXSDType_DOUBLE             ObjectXSDType = 4
	ObjectXSDType_DATETIME           ObjectXSDType = 5
	ObjectXSDType_TIME               ObjectXSDType = 6
	ObjectXSDType_DATE               ObjectXSDType = 7
	ObjectXSDType_GYEARMONTH         ObjectXSDType = 8
	ObjectXSDType_GYEAR              ObjectXSDType = 9
	ObjectXSDType_GMONTHDAY          ObjectXSDType = 10
	ObjectXSDType_GDAY               ObjectXSDType = 11
	ObjectXSDType_GMONTH             ObjectXSDType = 12
	ObjectXSDType_HEXBINARY          ObjectXSDType = 13
	ObjectXSDType_BASE64BINARY       ObjectXSDType = 14
	ObjectXSDType_ANYURI             ObjectXSDType = 15
	ObjectXSDType_NORMALIZEDSTRING   ObjectXSDType = 16
	ObjectXSDType_TOKEN              ObjectXSDType = 17
	ObjectXSDType_LANGUAGE           ObjectXSDType = 18
	ObjectXSDType_NMTOKEN            ObjectXSDType = 19
	ObjectXSDType_NAME               ObjectXSDType = 20
	ObjectXSDType_NCNAME             ObjectXSDType = 21
	ObjectXSDType_INTEGER            ObjectXSDType = 22
	ObjectXSDType_NONPOSITIVEINTEGER ObjectXSDType = 23
	ObjectXSDType_NEGATIVEINTEGER    ObjectXSDType = 24
	ObjectXSDType_LONG               ObjectXSDType = 25
	ObjectXSDType_INT                ObjectXSDType = 26
	ObjectXSDType_SHORT              ObjectXSDType = 27
	ObjectXSDType_BYTE               ObjectXSDType = 28
	ObjectXSDType_NONNEGATIVEINTEGER ObjectXSDType = 29
	ObjectXSDType_UNSIGNEDLONG       ObjectXSDType = 30
	ObjectXSDType_UNSIGNEDINT        ObjectXSDType = 31
	ObjectXSDType_UNSIGNEDSHORT      ObjectXSDType = 32
	ObjectXSDType_UNSIGNEDBYTE       ObjectXSDType = 33
	ObjectXSDType_POSITIVEINTEGER    ObjectXSDType = 34
)

var ObjectXSDType_name = map[int32]string{
	0:  "STRING",
	1:  "BOOLEAN",
	2:  "DECIMAL",
	3:  "FLOAT",
	4:  "DOUBLE",
	5:  "DATETIME",
	6:  "TIME",
	7:  "DATE",
	8:  "GYEARMONTH",
	9:  "GYEAR",
	10: "GMONTHDAY",
	11: "GDAY",
	12: "GMONTH",
	13: "HEXBINARY",
	14: "BASE64BINARY",
	15: "ANYURI",
	16: "NORMALIZEDSTRING",
	17: "TOKEN",
	18: "LANGUAGE",
	19: "NMTOKEN",
	20: "NAME",
	21: "NCNAME",
	22: "INTEGER",
	23: "NONPOSITIVEINTEGER",
	24: "NEGATIVEINTEGER",
	25: "LONG",
	26: "INT",
	27: "SHORT",
	28: "BYTE",
	29: "NONNEGATIVEINTEGER",
	30: "UNSIGNEDLONG",
	31: "UNSIGNEDINT",
	32: "UNSIGNEDSHORT",
	33: "UNSIGNEDBYTE",
	34: "POSITIVEINTEGER",
}
var ObjectXSDType_value = map[string]int32{
	"STRING":             0,
	"BOOLEAN":            1,
	"DECIMAL":            2,
	"FLOAT":              3,
	"DOUBLE":             4,
	"DATETIME":           5,
	"TIME":               6,
	"DATE":               7,
	"GYEARMONTH":         8,
	"GYEAR":              9,
	"GMONTHDAY":          10,
	"GDAY":               11,
	"GMONTH":             12,
	"HEXBINARY":          13,
	"BASE64BINARY":       14,
	"ANYURI":             15,
	"NORMALIZEDSTRING":   16,
	"TOKEN":              17,
	"LANGUAGE":           18,
	"NMTOKEN":            19,
	"NAME":               20,
	"NCNAME":             21,
	"INTEGER":            22,
	"NONPOSITIVEINTEGER": 23,
	"NEGATIVEINTEGER":    24,
	"LONG":               25,
	"INT":                26,
	"SHORT":              27,
	"BYTE":               28,
	"NONNEGATIVEINTEGER": 29,
	"UNSIGNEDLONG":       30,
	"UNSIGNEDINT":        31,
	"UNSIGNEDSHORT":      32,
	"UNSIGNEDBYTE":       33,
	"POSITIVEINTEGER":    34,
}

func (x ObjectXSDType) String() string {
	return proto.EnumName(ObjectXSDType_name, int32(x))
}
func (ObjectXSDType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type FragmentResponse struct {
	Request   *FragmentRequest `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	NrTriples int32            `protobuf:"varint,2,opt,name=nrTriples" json:"nrTriples,omitempty"`
	Page      int32            `protobuf:"varint,3,opt,name=page" json:"page,omitempty"`
	Fragments []*Fragment      `protobuf:"bytes,4,rep,name=fragments" json:"fragments,omitempty"`
}

func (m *FragmentResponse) Reset()                    { *m = FragmentResponse{} }
func (m *FragmentResponse) String() string            { return proto.CompactTextString(m) }
func (*FragmentResponse) ProtoMessage()               {}
func (*FragmentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FragmentResponse) GetRequest() *FragmentRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *FragmentResponse) GetNrTriples() int32 {
	if m != nil {
		return m.NrTriples
	}
	return 0
}

func (m *FragmentResponse) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *FragmentResponse) GetFragments() []*Fragment {
	if m != nil {
		return m.Fragments
	}
	return nil
}

type FragmentRequest struct {
	Subject   string `protobuf:"bytes,1,opt,name=subject" json:"subject,omitempty"`
	Predicate string `protobuf:"bytes,2,opt,name=predicate" json:"predicate,omitempty"`
	Object    string `protobuf:"bytes,3,opt,name=object" json:"object,omitempty"`
	Page      int32  `protobuf:"varint,4,opt,name=page" json:"page,omitempty"`
	Language  string `protobuf:"bytes,5,opt,name=language" json:"language,omitempty"`
}

func (m *FragmentRequest) Reset()                    { *m = FragmentRequest{} }
func (m *FragmentRequest) String() string            { return proto.CompactTextString(m) }
func (*FragmentRequest) ProtoMessage()               {}
func (*FragmentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FragmentRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *FragmentRequest) GetPredicate() string {
	if m != nil {
		return m.Predicate
	}
	return ""
}

func (m *FragmentRequest) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *FragmentRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *FragmentRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

type Fragment struct {
	Spec          string        `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	Revision      int32         `protobuf:"varint,2,opt,name=revision" json:"revision,omitempty"`
	NamedGraphURI string        `protobuf:"bytes,3,opt,name=NamedGraphURI" json:"NamedGraphURI,omitempty"`
	Subject       string        `protobuf:"bytes,4,opt,name=subject" json:"subject,omitempty"`
	Predicate     string        `protobuf:"bytes,5,opt,name=predicate" json:"predicate,omitempty"`
	Object        string        `protobuf:"bytes,6,opt,name=object" json:"object,omitempty"`
	Language      string        `protobuf:"bytes,7,opt,name=language" json:"language,omitempty"`
	ObjectType    ObjectType    `protobuf:"varint,8,opt,name=objectType,enum=fragments.ObjectType" json:"objectType,omitempty"`
	DataType      ObjectXSDType `protobuf:"varint,9,opt,name=dataType,enum=fragments.ObjectXSDType" json:"dataType,omitempty"`
}

func (m *Fragment) Reset()                    { *m = Fragment{} }
func (m *Fragment) String() string            { return proto.CompactTextString(m) }
func (*Fragment) ProtoMessage()               {}
func (*Fragment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Fragment) GetSpec() string {
	if m != nil {
		return m.Spec
	}
	return ""
}

func (m *Fragment) GetRevision() int32 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *Fragment) GetNamedGraphURI() string {
	if m != nil {
		return m.NamedGraphURI
	}
	return ""
}

func (m *Fragment) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *Fragment) GetPredicate() string {
	if m != nil {
		return m.Predicate
	}
	return ""
}

func (m *Fragment) GetObject() string {
	if m != nil {
		return m.Object
	}
	return ""
}

func (m *Fragment) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Fragment) GetObjectType() ObjectType {
	if m != nil {
		return m.ObjectType
	}
	return ObjectType_RESOURCE
}

func (m *Fragment) GetDataType() ObjectXSDType {
	if m != nil {
		return m.DataType
	}
	return ObjectXSDType_STRING
}

func init() {
	proto.RegisterType((*FragmentResponse)(nil), "fragments.FragmentResponse")
	proto.RegisterType((*FragmentRequest)(nil), "fragments.FragmentRequest")
	proto.RegisterType((*Fragment)(nil), "fragments.Fragment")
	proto.RegisterEnum("fragments.ObjectType", ObjectType_name, ObjectType_value)
	proto.RegisterEnum("fragments.ObjectXSDType", ObjectXSDType_name, ObjectXSDType_value)
}

func init() { proto.RegisterFile("hub3/fragments/fragments.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 681 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x5d, 0x4f, 0xdb, 0x48,
	0x14, 0x5d, 0x93, 0x4f, 0xdf, 0x10, 0x32, 0x0c, 0x1f, 0xeb, 0x0d, 0x2c, 0x9b, 0x45, 0x95, 0x1a,
	0xf1, 0x40, 0xd5, 0x40, 0xfb, 0x3e, 0x21, 0x83, 0xb1, 0xea, 0x8c, 0xab, 0xf1, 0xa4, 0x22, 0x7d,
	0x33, 0x61, 0x0a, 0xa9, 0x20, 0x71, 0xed, 0x04, 0xa9, 0xef, 0xfd, 0x03, 0xfd, 0x21, 0xfd, 0x01,
	0xfd, 0x77, 0xd5, 0x8c, 0x9d, 0xd8, 0xa1, 0x94, 0xb7, 0x7b, 0xcf, 0x3d, 0xe7, 0xdc, 0x73, 0x13,
	0x79, 0xe0, 0xe0, 0x76, 0x7e, 0x75, 0xf2, 0xea, 0x53, 0x14, 0xdc, 0xdc, 0xcb, 0xc9, 0x2c, 0xce,
	0xaa, 0xe3, 0x30, 0x9a, 0xce, 0xa6, 0xd8, 0x5c, 0x02, 0x87, 0x3f, 0x0c, 0x40, 0xe7, 0x69, 0xc7,
	0x65, 0x1c, 0x4e, 0x27, 0xb1, 0xc4, 0xa7, 0x50, 0x89, 0xe4, 0x97, 0xb9, 0x8c, 0x67, 0x96, 0xd1,
	0x32, 0xda, 0xb5, 0x4e, 0xf3, 0x38, 0xb3, 0xc8, 0xd8, 0x9a, 0xc1, 0x17, 0x54, 0xbc, 0x0f, 0xe6,
	0x24, 0x12, 0xd1, 0x38, 0xbc, 0x93, 0xb1, 0xb5, 0xd6, 0x32, 0xda, 0x25, 0x9e, 0x01, 0x18, 0x43,
	0x31, 0x0c, 0x6e, 0xa4, 0x55, 0xd0, 0x03, 0x5d, 0xe3, 0xd7, 0x90, 0x25, 0xb1, 0x8a, 0xad, 0x42,
	0xbb, 0xd6, 0xd9, 0x7a, 0x6a, 0x53, 0x2e, 0xef, 0x77, 0x03, 0x1a, 0x8f, 0x12, 0x60, 0x0b, 0x2a,
	0xf1, 0xfc, 0xea, 0xb3, 0x1c, 0x25, 0x71, 0x4d, 0xbe, 0x68, 0x55, 0xa4, 0x30, 0x92, 0xd7, 0xe3,
	0x51, 0x30, 0x93, 0x3a, 0x92, 0xc9, 0x33, 0x00, 0xef, 0x42, 0x79, 0x9a, 0xc8, 0x0a, 0x7a, 0x94,
	0x76, 0xcb, 0xa8, 0xc5, 0x5c, 0xd4, 0x26, 0x54, 0xef, 0x82, 0xc9, 0xcd, 0x5c, 0xe1, 0x25, 0xcd,
	0x5e, 0xf6, 0x87, 0x3f, 0xd7, 0xa0, 0xba, 0xc8, 0xa4, 0xc4, 0x71, 0x28, 0x47, 0x69, 0x12, 0x5d,
	0x2b, 0x71, 0x24, 0x1f, 0xc6, 0xf1, 0x78, 0x3a, 0x49, 0x7f, 0x98, 0x65, 0x8f, 0x5f, 0x40, 0x9d,
	0x05, 0xf7, 0xf2, 0xda, 0x8e, 0x82, 0xf0, 0x76, 0xc0, 0x9d, 0x34, 0xcb, 0x2a, 0x98, 0x3f, 0xb1,
	0xf8, 0xcc, 0x89, 0xa5, 0x3f, 0x9f, 0x58, 0x5e, 0x39, 0x31, 0x7f, 0x4e, 0x65, 0xf5, 0x1c, 0xfc,
	0x06, 0x20, 0x61, 0x89, 0xaf, 0xa1, 0xb4, 0xaa, 0x2d, 0xa3, 0xbd, 0xd1, 0xd9, 0xc9, 0xfd, 0x2d,
	0xde, 0x72, 0xc8, 0x73, 0x44, 0x7c, 0x0a, 0xd5, 0xeb, 0x60, 0x16, 0x68, 0x91, 0xa9, 0x45, 0xd6,
	0x6f, 0xa2, 0x4b, 0xbf, 0xa7, 0x75, 0x4b, 0xe6, 0xd1, 0x4b, 0x80, 0xcc, 0x0f, 0xaf, 0x43, 0x95,
	0x53, 0xdf, 0x1b, 0xf0, 0x33, 0x8a, 0xfe, 0xc2, 0x35, 0xa8, 0xb8, 0x8e, 0xa0, 0x9c, 0xb8, 0xc8,
	0x38, 0xfa, 0x56, 0x84, 0xfa, 0x8a, 0x09, 0x06, 0x28, 0xfb, 0x82, 0x3b, 0xcc, 0x4e, 0xa8, 0x5d,
	0xcf, 0x73, 0x29, 0x61, 0xc8, 0x50, 0x4d, 0x8f, 0x9e, 0x39, 0x7d, 0xe2, 0xa2, 0x35, 0x6c, 0x42,
	0xe9, 0xdc, 0xf5, 0x88, 0x40, 0x05, 0x25, 0xe8, 0x79, 0x83, 0xae, 0x4b, 0x51, 0x51, 0x6d, 0xea,
	0x11, 0x41, 0x85, 0xd3, 0xa7, 0xa8, 0x84, 0xab, 0x50, 0xd4, 0x55, 0x59, 0x55, 0x0a, 0x47, 0x15,
	0xbc, 0x01, 0x60, 0x0f, 0x29, 0xe1, 0x7d, 0x8f, 0x89, 0x0b, 0x54, 0x55, 0x46, 0xba, 0x47, 0x26,
	0xae, 0x83, 0x69, 0x6b, 0xb8, 0x47, 0x86, 0x08, 0x94, 0xc6, 0x56, 0x55, 0x4d, 0x6d, 0x48, 0x06,
	0x68, 0x5d, 0x91, 0x2e, 0xe8, 0x65, 0xd7, 0x61, 0x84, 0x0f, 0x51, 0x1d, 0x23, 0x58, 0xef, 0x12,
	0x9f, 0xbe, 0x3d, 0x4d, 0x91, 0x0d, 0x45, 0x26, 0x6c, 0x38, 0xe0, 0x0e, 0x6a, 0xe0, 0x6d, 0x40,
	0xcc, 0xe3, 0x7d, 0xe2, 0x3a, 0x1f, 0x69, 0x2f, 0xbd, 0x0a, 0xa9, 0x95, 0xc2, 0x7b, 0x47, 0x19,
	0xda, 0x54, 0x79, 0x5d, 0xc2, 0xec, 0x01, 0xb1, 0x29, 0xc2, 0xea, 0x42, 0xd6, 0x4f, 0x46, 0x5b,
	0x6a, 0x3d, 0x23, 0x7d, 0x8a, 0xb6, 0x95, 0x23, 0x3b, 0xd3, 0xf5, 0x8e, 0xa2, 0x38, 0x4c, 0x50,
	0x9b, 0x72, 0xb4, 0x8b, 0x77, 0x01, 0x33, 0x8f, 0xbd, 0xf7, 0x7c, 0x47, 0x38, 0x1f, 0xe8, 0x02,
	0xff, 0x1b, 0x6f, 0x41, 0x83, 0x51, 0x9b, 0xe4, 0x41, 0x4b, 0xf9, 0xb9, 0x1e, 0xb3, 0xd1, 0x3f,
	0xb8, 0x02, 0x05, 0x87, 0x09, 0xd4, 0x54, 0x41, 0xfc, 0x0b, 0x8f, 0x0b, 0xb4, 0xa7, 0xa6, 0xdd,
	0xa1, 0xa0, 0x68, 0x3f, 0x35, 0x7d, 0xac, 0xff, 0x57, 0x5d, 0x3a, 0x60, 0xbe, 0x63, 0x33, 0xda,
	0xd3, 0x3e, 0x07, 0xb8, 0x01, 0xb5, 0x05, 0xa2, 0xfc, 0xfe, 0xc3, 0x9b, 0x50, 0x5f, 0x00, 0x89,
	0x6f, 0x2b, 0xaf, 0xd2, 0xfe, 0xff, 0xab, 0x70, 0x8f, 0x13, 0x1f, 0x76, 0x44, 0xf6, 0xf9, 0xfb,
	0x32, 0x7a, 0x18, 0x8f, 0x24, 0x26, 0x50, 0xf6, 0x65, 0x10, 0x8d, 0x6e, 0xf1, 0x33, 0xcf, 0x54,
	0x73, 0xef, 0xc9, 0x59, 0xf2, 0xe0, 0x5d, 0x95, 0xf5, 0xbb, 0x78, 0xf2, 0x2b, 0x00, 0x00, 0xff,
	0xff, 0x0f, 0x8e, 0xf2, 0xeb, 0x39, 0x05, 0x00, 0x00,
}
