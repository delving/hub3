// Run 'make protobuffer' from the root directory to generate 'api.pb.go'.
syntax = "proto3";
package fragments;

// Query object

enum ResponseFormatType {
  JSON = 0;
  PROTOBUF = 1;
  // not supported 
  XML = 2;
  // not supported 
  JSONP = 3;
  // not supported 
  KML = 4;
  // not supported 
  GEOCLUSTER = 5;
  // not supported 
  GEOJSON = 6;
  // not supported
  GEOBUF = 7;
}

enum ItemFormatType {
  SUMMARY = 0;
  FRAGMENTGRAPH = 1;
  GROUPED = 2;
  JSONLD = 3;
}

enum ResponseBlockType {
  QUERY = 0;
  ITEMS = 1;
  FACETS = 2;
  LAYOUT = 3;
  PAGINATION = 4;
}


message FilterValue {
  repeated string value = 1;
}

message SearchRequest {
  // Will output a summary result set. Any valid Lucene or Solr Query syntax will work.
  string query = 1;
  ResponseFormatType responseFormatType = 2;
  // number of results returned
  // rows
  int32 responseSize = 3;
  int32 start = 4;
  int32 page = 5;
  map<string, FilterValue> QueryFilter = 6;
  map<string, FilterValue> HiddenQueryFilter = 7;
  repeated ResponseBlockType disable = 8;
  repeated ResponseBlockType enable = 9;
  repeated string FacetField  = 10;
  int32 FacetLimit = 11;
  bool FacetBoolType = 12;
  string sortBy = 13;
  // geo options
  string LatLong = 14; // pt
  string Distance = 15; // d
  // min_* and max_* are the bounding box parameters
  float min_x = 16;
  float min_y = 17;
  float max_x = 18;
  float max_y = 19;
  // add support for polygon
  repeated string field = 20;
  GeoType geoType = 21; 
  // qr
  string QueryRefinement = 22;
  string searchAfter = 23;
  ItemFormatType itemFormat = 24;
}

enum GeoType {
  BBOX = 0;
  GEOFILT = 1;
  CLUSTER = 2;
}

enum IdType {
  // same as ES doc_id
  HUDID = 0;
  // case insensitive id search
  IDCI = 1;
  // named graph
  NAMEDGRAPH = 2;
}

message DetailRequest {
  // option: any valid identifier specified by the idType
  // description: Will output a full-view. Default idType is hubId taken from the delving_hubId field.
  string id = 1;
  bool mlt = 2;
  ResponseFormatType format = 3;
  int32 mltCount = 4;
  string mltQueryFilter = 5;
  string mltFilterKey = 6;
  // searchRequest is a serialised form of the search result and is the return 
  // to results link
  string searchRequest = 7;
  // resultIndex is the point where this detail object is in the search result order
  int32 resultIndex = 8;
  // converter for result fields
  string converter = 9; 
  // the type of id used in the ?id field
  IdType idType = 10;
}


// Base Response objects

message BreadCrumb {
  string href = 1;
  string display = 2;
  string field = 3;
  string localised_field = 4;
  string value = 5;
  bool is_last = 6;
}

message PaginationLink {
  int32 start = 1;
  bool isLinked = 2;
  int32 pageNumber = 3;
}

message ScrollPager {
  // scrollID is serialized version SearchRequest
  string scrollID = 1;
  int32 cursor = 2;
  int64 total = 3;
  int32 rows = 4;
}

message Pagination {
  int32 start = 1;
  int32 rows = 2;
  int32 numFound = 3;
  bool hasNext = 4;
  int32 nextPage = 5;
  bool hasPrevious = 6;
  int32 previousPage = 7;
  int32 currentPage = 8;
  repeated PaginationLink links = 9;
}

message Query {
  int32 numfound = 1;
  string terms = 2;
  repeated BreadCrumb breadCrumbs = 3;
}

message Facet {
  string name = 1;
  bool isSelected = 2;
  string i18n = 3;
  int32 total = 4;
  int32 missingDocs = 5;
  int32 otherDocs = 6;
  repeated FaceLink links = 7;
}

message FaceLink {
  string url = 1;
  bool isSelected = 2;
  string value = 3;
  int32 count = 4;
  string displayString = 5;
}


// V3


message SearchResultWrapperV3 {
  SearchResultV3 result = 1;
}

// Full SearchResult
message SearchResultV3 {
  Query query = 1; 
  SearchRequest request = 2;
  Pagination pagination = 3;
  repeated fragments.FragmentGraph items = 4; 
  repeated Facet facets = 5;
}

message ScrollResultV3 {
  ScrollPager pager = 1;
  repeated fragments.FragmentGraph items = 5;
}

// V1 

message MetadataFieldV1 {
  repeated string field = 1;
}

message MetadataItemV1 {
  string doc_id = 1;
  string doc_type = 2;
  map<string, MetadataFieldV1> fields = 3;
}

message SearchResultWrapperV1 {
  SearchResultV1 result = 1;
}

// Full SearchResult
message SearchResultV1 {
  Query query = 1; 
  Pagination pagination = 2;
  repeated MetadataItemV1 items = 3;
  repeated Facet facets = 4;
}

// The structure of the detail page
message DetailResult {
  MetadataItemV1 item = 1;
}

service FragmentService           {
  rpc Search (FragmentRequest) returns (FragmentSearchResponse);
  rpc Update (FragmentGraph) returns (FragmentUpdateResponse);
}


message FragmentSearchResponse {
  FragmentRequest request = 1;
  int32 nrTriples = 2;
  int32 page = 3;
  repeated Fragment fragments = 4;
}

message FragmentUpdateResponse {
    int32 graphsStored = 1;
    string spec = 2;
    bool hasErrors = 3;
    repeated FragmentError errors = 4;
}

message FragmentError {
    
}

message FragmentRequest {
  string subject = 1;
  string predicate = 2;
  string object = 3;
  int32 page = 4;
  string language = 5;
  string orgID = 6;
  string graph = 7;
  string spec = 8;
  string echo = 9;
  string lodKey = 10;
}

enum ObjectType {
  RESOURCE = 0;
  LITERAL = 1;
}

enum ObjectXSDType {
  STRING = 0;
  BOOLEAN = 1;
  DECIMAL = 2;
  FLOAT = 3;
  DOUBLE = 4;
  DATETIME = 5;
  TIME = 6;
  DATE = 7;
  GYEARMONTH = 8;
  GYEAR = 9;
  GMONTHDAY = 10;
  GDAY = 11;
  GMONTH = 12;
  HEXBINARY = 13;
  BASE64BINARY = 14;
  ANYURI = 15;
  NORMALIZEDSTRING = 16;
  TOKEN = 17;
  LANGUAGE = 18;
  NMTOKEN = 19;
  NAME = 20;
  NCNAME = 21;
  INTEGER = 22;
  NONPOSITIVEINTEGER = 23;
  NEGATIVEINTEGER = 24;
  LONG = 25;
  INT = 26;
  SHORT = 27;
  BYTE = 28;
  NONNEGATIVEINTEGER = 29;
  UNSIGNEDLONG = 30;
  UNSIGNEDINT = 31;
  UNSIGNEDSHORT = 32;
  UNSIGNEDBYTE = 33;
  POSITIVEINTEGER = 34;
}

enum RecordType {
  NARTHEX = 0;
  SCHEMA = 1;
  VOCABULARY = 2;
  SOURCE = 3;
  CACHE = 4;
}

/*type FragmentGraph struct {*/
	/*OrgID         string   `json:"orgID"`*/
	/*Spec          string   `json:"spec"`*/
	/*HubID         string   `json:"hubID"`*/
	/*Revision      int32    `json:"revision"`*/
	/*NamedGraphURI string   `json:"namedGraphURI"`*/
	/*Tags          []string `json:"tags"`*/
	/*Graph         *r.Graph `json:"graph"`*/
	/*MimeType      string   `json:"mimeType"`*/
/*}*/


message FragmentGraph {
  Header meta = 1;

  string entryURI = 2;
  string namedGraphURI = 3;
  RecordType recordType = 4;

  repeated Fragment fragments = 5;
  repeated ResultSummary summary = 6;
}

message ResultSummary {
  string title = 1;
  string owner = 2;
  string datasetTitle = 3;
  string thumbnail = 4;
  string landingPage = 5;
  string latLong = 6;
  string date = 7;
  string description = 8;
  string subject = 9;
}

message Header {
  // The tenant identifier for this RecordType.
  string orgID = 1;
  // The spec is the unique dataset string to identify which dataset  this 
  // Fragment belongs to
  string spec = 2; 
  // The revision is used to determine which version is an orphan and should be removed
  int32 revision = 3;
  // The hubId is the unique identifier for any document record in hub3
  string hubID = 4;
  // Each fragment can be tagged with additional metadata. This can be queried for.
  // Some examples are 'resource', 'literal', 'bnode', 'rdfType', etc.
  repeated string tags = 5;
  // The document type for ElasticSearch. This is a constant value 
  string docType = 6;
}

// Fragment are used and stored in ElasticSearch for the Linked Data Fragments
// API
message Fragment {
  
  // Generic Header for all ElasticSearch records
  Header meta = 1;

  // RDF core
  // URI of the Triple subject
  string subject = 7;
  // URI of the Triple predicate
  string predicate = 8;
  // An underscore delimited version of the namespace and the label of the URI
  // This is used in the Search DSL, for example dc:title becomes dc_title
  string searchLabel = 9;
  // The triple object. Can be both literal or resource (including Blank Nodes)
  string object = 10;
  // ISO 693 represenation of language code
  string language = 11;
  // Human readable version of the xsd:dataType
  string dataType = 12; 
  
  // The n-triples representation of the triple. Used to quickly render
  // RDF from a FragmentQuery
  string triple = 13;
  // The named graph that this triple is part of
  string namedGraphURI = 14;

  // the relative key that is used to resolve a SPARQL describe for a Subject
  string lodKey = 15;
}

message FragmentGen1 {
  // meta block
  string orgID = 1;
  string spec = 2; 
  int32 revision = 3;
  string hubID = 4;

  // RDF core
  string subject = 5;
  repeated string subjectClass = 6;

  string predicate = 7;
  string searchLabel = 8;

  string object = 9;
  ObjectType   objectType = 10;
  string language = 11;
  string objectContentType = 12;
  ObjectXSDType dataType = 13;
  string XSDRaw = 14;
  string objectTypeRaw = 29; 

  string namedGraphURI = 15;
  string triple = 16;

  // RDF graph position
  int32 level = 17;
  string referrerSubject = 18;
  string referrerPredicate = 19;
  string referrerSearchLabel = 20;
  repeated string referrerSubjectClass = 21;

  // Content Index
  string latLong = 22;
  string date = 23;
  string dateRange = 24;
  int32 integer = 25;
  int32 integerRange = 26;
  int32 referrerResourceSortOrder = 27;

// content tags
// example values linkGraphExternal prefLabel linkDomainExternal thumbnail date
  repeated string tags = 28;
  string docType = 30;
  string lodKey = 31;
}
