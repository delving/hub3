// Run 'make protobuffer' from the root directory to generate 'fragments.pb.go'.
syntax = "proto3";
package fragments;

service FragmentService           {
  rpc Search (FragmentRequest) returns (FragmentSearchResponse);
  rpc Update (FragmentGraph) returns (FragmentUpdateResponse);
}


message FragmentSearchResponse {
  FragmentRequest request = 1;
  int32 nrTriples = 2;
  int32 page = 3;
  repeated Fragment fragments = 4;
}

message FragmentUpdateResponse {
    int32 graphsStored = 1;
    string spec = 2;
    bool hasErrors = 3;
    repeated FragmentError errors = 4;
}

message FragmentError {
    
}

message FragmentRequest {
  string subject = 1;
  string predicate = 2;
  string object = 3;
  int32 page = 4;
  string language = 5;
  string orgID = 6;
  string graph = 7;
  string spec = 8;
}

enum ObjectType {
  RESOURCE = 0;
  LITERAL = 1;
}

enum ObjectXSDType {
  STRING = 0;
  BOOLEAN = 1;
  DECIMAL = 2;
  FLOAT = 3;
  DOUBLE = 4;
  DATETIME = 5;
  TIME = 6;
  DATE = 7;
  GYEARMONTH = 8;
  GYEAR = 9;
  GMONTHDAY = 10;
  GDAY = 11;
  GMONTH = 12;
  HEXBINARY = 13;
  BASE64BINARY = 14;
  ANYURI = 15;
  NORMALIZEDSTRING = 16;
  TOKEN = 17;
  LANGUAGE = 18;
  NMTOKEN = 19;
  NAME = 20;
  NCNAME = 21;
  INTEGER = 22;
  NONPOSITIVEINTEGER = 23;
  NEGATIVEINTEGER = 24;
  LONG = 25;
  INT = 26;
  SHORT = 27;
  BYTE = 28;
  NONNEGATIVEINTEGER = 29;
  UNSIGNEDLONG = 30;
  UNSIGNEDINT = 31;
  UNSIGNEDSHORT = 32;
  UNSIGNEDBYTE = 33;
  POSITIVEINTEGER = 34;
}

enum RecordType {
  NARTHEX = 0;
  SCHEMA = 1;
  VOCABULARY = 2;
  SOURCE = 3;
  CACHE = 4;
}

/*type FragmentGraph struct {*/
	/*OrgID         string   `json:"orgID"`*/
	/*Spec          string   `json:"spec"`*/
	/*HubID         string   `json:"hubID"`*/
	/*Revision      int32    `json:"revision"`*/
	/*NamedGraphURI string   `json:"namedGraphURI"`*/
	/*Tags          []string `json:"tags"`*/
	/*Graph         *r.Graph `json:"graph"`*/
	/*MimeType      string   `json:"mimeType"`*/
/*}*/


message FragmentGraph {
  string orgID = 1;
  string spec  = 2;
  int32 revision = 3;
  string hubID = 4;

  string entryURI = 5;
  string namedGraphURI = 6;
  bytes RDF = 7;
  string rdfMimeType = 8;
  RecordType recordType = 9;

  repeated Fragment fragments = 10;
  repeated string tags = 11;
  string docType = 12;
}

message Fragment {
  // meta block
  string orgID = 1;
  string spec = 2; 
  int32 revision = 3;
  string hubID = 4;

  // RDF core
  string subject = 5;
  repeated string subjectClass = 6;

  string predicate = 7;
  string searchLabel = 8;

  string object = 9;
  ObjectType   objectType = 10;
  string language = 11;
  string objectContentType = 12;
  ObjectXSDType dataType = 13;
  string XSDRaw = 14;
  string objectTypeRaw = 29; 

  string namedGraphURI = 15;
  string triple = 16;

  // RDF graph position
  int32 level = 17;
  string referrerSubject = 18;
  string referrerPredicate = 19;
  string referrerSearchLabel = 20;
  repeated string referrerSubjectClass = 21;

  // Content Index
  string latLong = 22;
  string date = 23;
  string dateRange = 24;
  int32 integer = 25;
  int32 integerRange = 26;
  int32 referrerResourceSortOrder = 27;

// content tags
// example values linkGraphExternal prefLabel linkDomainExternal thumbnail date
  repeated string tags = 28;
  string docType = 30;
}
