// Copyright 2017 Delving B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Run 'make protobuffer' from the root directory to generate 'api.pb.go'.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.1
// 	protoc        v3.11.4
// source: hub3/fragments/api.proto

package fragments

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ResponseFormatType int32

const (
	ResponseFormatType_JSON     ResponseFormatType = 0
	ResponseFormatType_PROTOBUF ResponseFormatType = 1
	// not supported
	ResponseFormatType_XML ResponseFormatType = 2
	// not supported
	ResponseFormatType_JSONP ResponseFormatType = 3
	// not supported
	ResponseFormatType_KML ResponseFormatType = 4
	// not supported
	ResponseFormatType_GEOCLUSTER ResponseFormatType = 5
	// not supported
	ResponseFormatType_GEOJSON ResponseFormatType = 6
	// not supported
	ResponseFormatType_GEOBUF ResponseFormatType = 7
	// supported
	ResponseFormatType_LDJSON ResponseFormatType = 8
	// supported
	ResponseFormatType_BULKACTION ResponseFormatType = 9
)

// Enum value maps for ResponseFormatType.
var (
	ResponseFormatType_name = map[int32]string{
		0: "JSON",
		1: "PROTOBUF",
		2: "XML",
		3: "JSONP",
		4: "KML",
		5: "GEOCLUSTER",
		6: "GEOJSON",
		7: "GEOBUF",
		8: "LDJSON",
		9: "BULKACTION",
	}
	ResponseFormatType_value = map[string]int32{
		"JSON":       0,
		"PROTOBUF":   1,
		"XML":        2,
		"JSONP":      3,
		"KML":        4,
		"GEOCLUSTER": 5,
		"GEOJSON":    6,
		"GEOBUF":     7,
		"LDJSON":     8,
		"BULKACTION": 9,
	}
)

func (x ResponseFormatType) Enum() *ResponseFormatType {
	p := new(ResponseFormatType)
	*p = x
	return p
}

func (x ResponseFormatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseFormatType) Descriptor() protoreflect.EnumDescriptor {
	return file_hub3_fragments_api_proto_enumTypes[0].Descriptor()
}

func (ResponseFormatType) Type() protoreflect.EnumType {
	return &file_hub3_fragments_api_proto_enumTypes[0]
}

func (x ResponseFormatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseFormatType.Descriptor instead.
func (ResponseFormatType) EnumDescriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{0}
}

type ItemFormatType int32

const (
	ItemFormatType_SUMMARY       ItemFormatType = 0
	ItemFormatType_FRAGMENTGRAPH ItemFormatType = 1
	ItemFormatType_GROUPED       ItemFormatType = 2
	ItemFormatType_JSONLD        ItemFormatType = 3
	ItemFormatType_FLAT          ItemFormatType = 4
	ItemFormatType_TREE          ItemFormatType = 5
)

// Enum value maps for ItemFormatType.
var (
	ItemFormatType_name = map[int32]string{
		0: "SUMMARY",
		1: "FRAGMENTGRAPH",
		2: "GROUPED",
		3: "JSONLD",
		4: "FLAT",
		5: "TREE",
	}
	ItemFormatType_value = map[string]int32{
		"SUMMARY":       0,
		"FRAGMENTGRAPH": 1,
		"GROUPED":       2,
		"JSONLD":        3,
		"FLAT":          4,
		"TREE":          5,
	}
)

func (x ItemFormatType) Enum() *ItemFormatType {
	p := new(ItemFormatType)
	*p = x
	return p
}

func (x ItemFormatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemFormatType) Descriptor() protoreflect.EnumDescriptor {
	return file_hub3_fragments_api_proto_enumTypes[1].Descriptor()
}

func (ItemFormatType) Type() protoreflect.EnumType {
	return &file_hub3_fragments_api_proto_enumTypes[1]
}

func (x ItemFormatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemFormatType.Descriptor instead.
func (ItemFormatType) EnumDescriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{1}
}

type ResponseBlockType int32

const (
	ResponseBlockType_QUERY      ResponseBlockType = 0
	ResponseBlockType_ITEMS      ResponseBlockType = 1
	ResponseBlockType_FACETS     ResponseBlockType = 2
	ResponseBlockType_LAYOUT     ResponseBlockType = 3
	ResponseBlockType_PAGINATION ResponseBlockType = 4
)

// Enum value maps for ResponseBlockType.
var (
	ResponseBlockType_name = map[int32]string{
		0: "QUERY",
		1: "ITEMS",
		2: "FACETS",
		3: "LAYOUT",
		4: "PAGINATION",
	}
	ResponseBlockType_value = map[string]int32{
		"QUERY":      0,
		"ITEMS":      1,
		"FACETS":     2,
		"LAYOUT":     3,
		"PAGINATION": 4,
	}
)

func (x ResponseBlockType) Enum() *ResponseBlockType {
	p := new(ResponseBlockType)
	*p = x
	return p
}

func (x ResponseBlockType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseBlockType) Descriptor() protoreflect.EnumDescriptor {
	return file_hub3_fragments_api_proto_enumTypes[2].Descriptor()
}

func (ResponseBlockType) Type() protoreflect.EnumType {
	return &file_hub3_fragments_api_proto_enumTypes[2]
}

func (x ResponseBlockType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseBlockType.Descriptor instead.
func (ResponseBlockType) EnumDescriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{2}
}

type FacetType int32

const (
	FacetType_TERMS     FacetType = 0
	FacetType_HISTOGRAM FacetType = 1
	FacetType_MINMAX    FacetType = 2
	FacetType_TREEFACET FacetType = 3
	FacetType_TAGS      FacetType = 4
	FacetType_METATAGS  FacetType = 5
)

// Enum value maps for FacetType.
var (
	FacetType_name = map[int32]string{
		0: "TERMS",
		1: "HISTOGRAM",
		2: "MINMAX",
		3: "TREEFACET",
		4: "TAGS",
		5: "METATAGS",
	}
	FacetType_value = map[string]int32{
		"TERMS":     0,
		"HISTOGRAM": 1,
		"MINMAX":    2,
		"TREEFACET": 3,
		"TAGS":      4,
		"METATAGS":  5,
	}
)

func (x FacetType) Enum() *FacetType {
	p := new(FacetType)
	*p = x
	return p
}

func (x FacetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FacetType) Descriptor() protoreflect.EnumDescriptor {
	return file_hub3_fragments_api_proto_enumTypes[3].Descriptor()
}

func (FacetType) Type() protoreflect.EnumType {
	return &file_hub3_fragments_api_proto_enumTypes[3]
}

func (x FacetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FacetType.Descriptor instead.
func (FacetType) EnumDescriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{3}
}

type QueryFilterType int32

const (
	QueryFilterType_TEXT      QueryFilterType = 0
	QueryFilterType_ID        QueryFilterType = 1
	QueryFilterType_EXCLUDE   QueryFilterType = 2
	QueryFilterType_EXISTS    QueryFilterType = 3
	QueryFilterType_RANGE     QueryFilterType = 4
	QueryFilterType_DATERANGE QueryFilterType = 5
	QueryFilterType_ISODATE   QueryFilterType = 6
	QueryFilterType_TREEITEM  QueryFilterType = 7
	QueryFilterType_ENTRYTAG  QueryFilterType = 8
)

// Enum value maps for QueryFilterType.
var (
	QueryFilterType_name = map[int32]string{
		0: "TEXT",
		1: "ID",
		2: "EXCLUDE",
		3: "EXISTS",
		4: "RANGE",
		5: "DATERANGE",
		6: "ISODATE",
		7: "TREEITEM",
		8: "ENTRYTAG",
	}
	QueryFilterType_value = map[string]int32{
		"TEXT":      0,
		"ID":        1,
		"EXCLUDE":   2,
		"EXISTS":    3,
		"RANGE":     4,
		"DATERANGE": 5,
		"ISODATE":   6,
		"TREEITEM":  7,
		"ENTRYTAG":  8,
	}
)

func (x QueryFilterType) Enum() *QueryFilterType {
	p := new(QueryFilterType)
	*p = x
	return p
}

func (x QueryFilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryFilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_hub3_fragments_api_proto_enumTypes[4].Descriptor()
}

func (QueryFilterType) Type() protoreflect.EnumType {
	return &file_hub3_fragments_api_proto_enumTypes[4]
}

func (x QueryFilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryFilterType.Descriptor instead.
func (QueryFilterType) EnumDescriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{4}
}

type GeoType int32

const (
	GeoType_BBOX    GeoType = 0
	GeoType_GEOFILT GeoType = 1
	GeoType_CLUSTER GeoType = 2
)

// Enum value maps for GeoType.
var (
	GeoType_name = map[int32]string{
		0: "BBOX",
		1: "GEOFILT",
		2: "CLUSTER",
	}
	GeoType_value = map[string]int32{
		"BBOX":    0,
		"GEOFILT": 1,
		"CLUSTER": 2,
	}
)

func (x GeoType) Enum() *GeoType {
	p := new(GeoType)
	*p = x
	return p
}

func (x GeoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeoType) Descriptor() protoreflect.EnumDescriptor {
	return file_hub3_fragments_api_proto_enumTypes[5].Descriptor()
}

func (GeoType) Type() protoreflect.EnumType {
	return &file_hub3_fragments_api_proto_enumTypes[5]
}

func (x GeoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GeoType.Descriptor instead.
func (GeoType) EnumDescriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{5}
}

type IdType int32

const (
	// same as ES doc_id
	IdType_HUDID IdType = 0
	// case insensitive id search
	IdType_IDCI IdType = 1
	// named graph
	IdType_NAMEDGRAPH IdType = 2
)

// Enum value maps for IdType.
var (
	IdType_name = map[int32]string{
		0: "HUDID",
		1: "IDCI",
		2: "NAMEDGRAPH",
	}
	IdType_value = map[string]int32{
		"HUDID":      0,
		"IDCI":       1,
		"NAMEDGRAPH": 2,
	}
)

func (x IdType) Enum() *IdType {
	p := new(IdType)
	*p = x
	return p
}

func (x IdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdType) Descriptor() protoreflect.EnumDescriptor {
	return file_hub3_fragments_api_proto_enumTypes[6].Descriptor()
}

func (IdType) Type() protoreflect.EnumType {
	return &file_hub3_fragments_api_proto_enumTypes[6]
}

func (x IdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdType.Descriptor instead.
func (IdType) EnumDescriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{6}
}

type RecordType int32

const (
	RecordType_NARTHEX    RecordType = 0
	RecordType_SCHEMA     RecordType = 1
	RecordType_VOCABULARY RecordType = 2
	RecordType_SOURCE     RecordType = 3
	RecordType_CACHE      RecordType = 4
)

// Enum value maps for RecordType.
var (
	RecordType_name = map[int32]string{
		0: "NARTHEX",
		1: "SCHEMA",
		2: "VOCABULARY",
		3: "SOURCE",
		4: "CACHE",
	}
	RecordType_value = map[string]int32{
		"NARTHEX":    0,
		"SCHEMA":     1,
		"VOCABULARY": 2,
		"SOURCE":     3,
		"CACHE":      4,
	}
)

func (x RecordType) Enum() *RecordType {
	p := new(RecordType)
	*p = x
	return p
}

func (x RecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_hub3_fragments_api_proto_enumTypes[7].Descriptor()
}

func (RecordType) Type() protoreflect.EnumType {
	return &file_hub3_fragments_api_proto_enumTypes[7]
}

func (x RecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordType.Descriptor instead.
func (RecordType) EnumDescriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{7}
}

type FilterValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *FilterValue) Reset() {
	*x = FilterValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterValue) ProtoMessage() {}

func (x *FilterValue) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterValue.ProtoReflect.Descriptor instead.
func (*FilterValue) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{0}
}

func (x *FilterValue) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type ContextQueryFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchLabel string `protobuf:"bytes,1,opt,name=SearchLabel,proto3" json:"SearchLabel,omitempty"`
	TypeClass   string `protobuf:"bytes,2,opt,name=TypeClass,proto3" json:"TypeClass,omitempty"`
}

func (x *ContextQueryFilter) Reset() {
	*x = ContextQueryFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextQueryFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextQueryFilter) ProtoMessage() {}

func (x *ContextQueryFilter) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextQueryFilter.ProtoReflect.Descriptor instead.
func (*ContextQueryFilter) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{1}
}

func (x *ContextQueryFilter) GetSearchLabel() string {
	if x != nil {
		return x.SearchLabel
	}
	return ""
}

func (x *ContextQueryFilter) GetTypeClass() string {
	if x != nil {
		return x.TypeClass
	}
	return ""
}

type QueryFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level1      *ContextQueryFilter `protobuf:"bytes,1,opt,name=Level1,proto3" json:"Level1,omitempty"`
	Level2      *ContextQueryFilter `protobuf:"bytes,2,opt,name=Level2,proto3" json:"Level2,omitempty"`
	SearchLabel string              `protobuf:"bytes,3,opt,name=SearchLabel,proto3" json:"SearchLabel,omitempty"`
	TypeClass   string              `protobuf:"bytes,6,opt,name=TypeClass,proto3" json:"TypeClass,omitempty"`
	Value       string              `protobuf:"bytes,4,opt,name=Value,proto3" json:"Value,omitempty"`
	Exclude     bool                `protobuf:"varint,5,opt,name=Exclude,proto3" json:"Exclude,omitempty"`
	ID          bool                `protobuf:"varint,7,opt,name=ID,proto3" json:"ID,omitempty"`
	Exists      bool                `protobuf:"varint,8,opt,name=Exists,proto3" json:"Exists,omitempty"`
	Type        QueryFilterType     `protobuf:"varint,9,opt,name=type,proto3,enum=fragments.QueryFilterType" json:"type,omitempty"`
	Lte         string              `protobuf:"bytes,10,opt,name=lte,proto3" json:"lte,omitempty"`
	Gte         string              `protobuf:"bytes,11,opt,name=gte,proto3" json:"gte,omitempty"` // Path is the full query path
}

func (x *QueryFilter) Reset() {
	*x = QueryFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFilter) ProtoMessage() {}

func (x *QueryFilter) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFilter.ProtoReflect.Descriptor instead.
func (*QueryFilter) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{2}
}

func (x *QueryFilter) GetLevel1() *ContextQueryFilter {
	if x != nil {
		return x.Level1
	}
	return nil
}

func (x *QueryFilter) GetLevel2() *ContextQueryFilter {
	if x != nil {
		return x.Level2
	}
	return nil
}

func (x *QueryFilter) GetSearchLabel() string {
	if x != nil {
		return x.SearchLabel
	}
	return ""
}

func (x *QueryFilter) GetTypeClass() string {
	if x != nil {
		return x.TypeClass
	}
	return ""
}

func (x *QueryFilter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *QueryFilter) GetExclude() bool {
	if x != nil {
		return x.Exclude
	}
	return false
}

func (x *QueryFilter) GetID() bool {
	if x != nil {
		return x.ID
	}
	return false
}

func (x *QueryFilter) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

func (x *QueryFilter) GetType() QueryFilterType {
	if x != nil {
		return x.Type
	}
	return QueryFilterType_TEXT
}

func (x *QueryFilter) GetLte() string {
	if x != nil {
		return x.Lte
	}
	return ""
}

func (x *QueryFilter) GetGte() string {
	if x != nil {
		return x.Gte
	}
	return ""
}

type FacetField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field        string    `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Asc          bool      `protobuf:"varint,2,opt,name=asc,proto3" json:"asc,omitempty"`
	ByName       bool      `protobuf:"varint,3,opt,name=byName,proto3" json:"byName,omitempty"`
	Size         int32     `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	ById         bool      `protobuf:"varint,5,opt,name=byId,proto3" json:"byId,omitempty"`
	Name         string    `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Type         FacetType `protobuf:"varint,7,opt,name=type,proto3,enum=fragments.FacetType" json:"type,omitempty"`
	DateInterval string    `protobuf:"bytes,8,opt,name=dateInterval,proto3" json:"dateInterval,omitempty"`
	AggField     string    `protobuf:"bytes,9,opt,name=aggField,proto3" json:"aggField,omitempty"`
}

func (x *FacetField) Reset() {
	*x = FacetField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacetField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacetField) ProtoMessage() {}

func (x *FacetField) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacetField.ProtoReflect.Descriptor instead.
func (*FacetField) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{3}
}

func (x *FacetField) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *FacetField) GetAsc() bool {
	if x != nil {
		return x.Asc
	}
	return false
}

func (x *FacetField) GetByName() bool {
	if x != nil {
		return x.ByName
	}
	return false
}

func (x *FacetField) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FacetField) GetById() bool {
	if x != nil {
		return x.ById
	}
	return false
}

func (x *FacetField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FacetField) GetType() FacetType {
	if x != nil {
		return x.Type
	}
	return FacetType_TERMS
}

func (x *FacetField) GetDateInterval() string {
	if x != nil {
		return x.DateInterval
	}
	return ""
}

func (x *FacetField) GetAggField() string {
	if x != nil {
		return x.AggField
	}
	return ""
}

type TreeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CLevel           string   `protobuf:"bytes,1,opt,name=cLevel,proto3" json:"cLevel,omitempty"`
	Leaf             string   `protobuf:"bytes,2,opt,name=leaf,proto3" json:"leaf,omitempty"`
	Parent           string   `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
	Type             []string `protobuf:"bytes,4,rep,name=type,proto3" json:"type,omitempty"`
	Depth            []string `protobuf:"bytes,5,rep,name=depth,proto3" json:"depth,omitempty"`
	FillTree         bool     `protobuf:"varint,6,opt,name=fillTree,proto3" json:"fillTree,omitempty"`
	ChildCount       string   `protobuf:"bytes,7,opt,name=childCount,proto3" json:"childCount,omitempty"`
	Label            string   `protobuf:"bytes,8,opt,name=label,proto3" json:"label,omitempty"`
	Spec             string   `protobuf:"bytes,9,opt,name=spec,proto3" json:"spec,omitempty"`
	UnitID           string   `protobuf:"bytes,10,opt,name=unitID,proto3" json:"unitID,omitempty"`
	CursorHint       int32    `protobuf:"varint,11,opt,name=cursorHint,proto3" json:"cursorHint,omitempty"`
	MimeType         []string `protobuf:"bytes,12,rep,name=mimeType,proto3" json:"mimeType,omitempty"`
	HasRestriction   bool     `protobuf:"varint,13,opt,name=hasRestriction,proto3" json:"hasRestriction,omitempty"`
	HasDigitalObject bool     `protobuf:"varint,14,opt,name=hasDigitalObject,proto3" json:"hasDigitalObject,omitempty"`
	Page             []int32  `protobuf:"varint,15,rep,packed,name=page,proto3" json:"page,omitempty"`
	PageSize         int32    `protobuf:"varint,16,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	AllParents       bool     `protobuf:"varint,17,opt,name=allParents,proto3" json:"allParents,omitempty"`
	IsPaging         bool     `protobuf:"varint,18,opt,name=isPaging,proto3" json:"isPaging,omitempty"`
	IsSearch         bool     `protobuf:"varint,19,opt,name=isSearch,proto3" json:"isSearch,omitempty"`
	PageMode         string   `protobuf:"bytes,20,opt,name=pageMode,proto3" json:"pageMode,omitempty"`
	Query            string   `protobuf:"bytes,21,opt,name=query,proto3" json:"query,omitempty"`
	WithFields       bool     `protobuf:"varint,22,opt,name=withFields,proto3" json:"withFields,omitempty"`
}

func (x *TreeQuery) Reset() {
	*x = TreeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeQuery) ProtoMessage() {}

func (x *TreeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeQuery.ProtoReflect.Descriptor instead.
func (*TreeQuery) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{4}
}

func (x *TreeQuery) GetCLevel() string {
	if x != nil {
		return x.CLevel
	}
	return ""
}

func (x *TreeQuery) GetLeaf() string {
	if x != nil {
		return x.Leaf
	}
	return ""
}

func (x *TreeQuery) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *TreeQuery) GetType() []string {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *TreeQuery) GetDepth() []string {
	if x != nil {
		return x.Depth
	}
	return nil
}

func (x *TreeQuery) GetFillTree() bool {
	if x != nil {
		return x.FillTree
	}
	return false
}

func (x *TreeQuery) GetChildCount() string {
	if x != nil {
		return x.ChildCount
	}
	return ""
}

func (x *TreeQuery) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *TreeQuery) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

func (x *TreeQuery) GetUnitID() string {
	if x != nil {
		return x.UnitID
	}
	return ""
}

func (x *TreeQuery) GetCursorHint() int32 {
	if x != nil {
		return x.CursorHint
	}
	return 0
}

func (x *TreeQuery) GetMimeType() []string {
	if x != nil {
		return x.MimeType
	}
	return nil
}

func (x *TreeQuery) GetHasRestriction() bool {
	if x != nil {
		return x.HasRestriction
	}
	return false
}

func (x *TreeQuery) GetHasDigitalObject() bool {
	if x != nil {
		return x.HasDigitalObject
	}
	return false
}

func (x *TreeQuery) GetPage() []int32 {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *TreeQuery) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *TreeQuery) GetAllParents() bool {
	if x != nil {
		return x.AllParents
	}
	return false
}

func (x *TreeQuery) GetIsPaging() bool {
	if x != nil {
		return x.IsPaging
	}
	return false
}

func (x *TreeQuery) GetIsSearch() bool {
	if x != nil {
		return x.IsSearch
	}
	return false
}

func (x *TreeQuery) GetPageMode() string {
	if x != nil {
		return x.PageMode
	}
	return ""
}

func (x *TreeQuery) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *TreeQuery) GetWithFields() bool {
	if x != nil {
		return x.WithFields
	}
	return false
}

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Will output a summary result set. Any valid Lucene or Solr Query syntax will work.
	Query              string              `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	ResponseFormatType ResponseFormatType  `protobuf:"varint,2,opt,name=responseFormatType,proto3,enum=fragments.ResponseFormatType" json:"responseFormatType,omitempty"`
	ResponseSize       int32               `protobuf:"varint,3,opt,name=responseSize,proto3" json:"responseSize,omitempty"`
	Start              int32               `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`
	Page               int32               `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	QueryFilter        []*QueryFilter      `protobuf:"bytes,6,rep,name=QueryFilter,proto3" json:"QueryFilter,omitempty"`
	HiddenQueryFilter  []*QueryFilter      `protobuf:"bytes,7,rep,name=HiddenQueryFilter,proto3" json:"HiddenQueryFilter,omitempty"`
	Disable            []ResponseBlockType `protobuf:"varint,8,rep,packed,name=disable,proto3,enum=fragments.ResponseBlockType" json:"disable,omitempty"`
	Enable             []ResponseBlockType `protobuf:"varint,9,rep,packed,name=enable,proto3,enum=fragments.ResponseBlockType" json:"enable,omitempty"`
	FacetField         []*FacetField       `protobuf:"bytes,10,rep,name=facetField,proto3" json:"facetField,omitempty"`
	FacetLimit         int32               `protobuf:"varint,11,opt,name=FacetLimit,proto3" json:"FacetLimit,omitempty"`
	FacetAndBoolType   bool                `protobuf:"varint,12,opt,name=FacetAndBoolType,proto3" json:"FacetAndBoolType,omitempty"`
	SortBy             string              `protobuf:"bytes,13,opt,name=sortBy,proto3" json:"sortBy,omitempty"`
	// geo options
	LatLong  string `protobuf:"bytes,14,opt,name=LatLong,proto3" json:"LatLong,omitempty"`   // pt
	Distance string `protobuf:"bytes,15,opt,name=Distance,proto3" json:"Distance,omitempty"` // d
	// min_* and max_* are the bounding box parameters
	MinX float32 `protobuf:"fixed32,16,opt,name=min_x,json=minX,proto3" json:"min_x,omitempty"`
	MinY float32 `protobuf:"fixed32,17,opt,name=min_y,json=minY,proto3" json:"min_y,omitempty"`
	MaxX float32 `protobuf:"fixed32,18,opt,name=max_x,json=maxX,proto3" json:"max_x,omitempty"`
	MaxY float32 `protobuf:"fixed32,19,opt,name=max_y,json=maxY,proto3" json:"max_y,omitempty"`
	// add support for polygon
	Field   []string `protobuf:"bytes,20,rep,name=field,proto3" json:"field,omitempty"`
	GeoType GeoType  `protobuf:"varint,21,opt,name=geoType,proto3,enum=fragments.GeoType" json:"geoType,omitempty"`
	// qr
	QueryRefinement string         `protobuf:"bytes,22,opt,name=QueryRefinement,proto3" json:"QueryRefinement,omitempty"`
	SearchAfter     []byte         `protobuf:"bytes,23,opt,name=searchAfter,proto3" json:"searchAfter,omitempty"`
	ItemFormat      ItemFormatType `protobuf:"varint,24,opt,name=itemFormat,proto3,enum=fragments.ItemFormatType" json:"itemFormat,omitempty"`
	Paging          bool           `protobuf:"varint,25,opt,name=Paging,proto3" json:"Paging,omitempty"`
	CollapseOn      string         `protobuf:"bytes,26,opt,name=collapseOn,proto3" json:"collapseOn,omitempty"`
	CollapseSize    int32          `protobuf:"varint,27,opt,name=collapseSize,proto3" json:"collapseSize,omitempty"`
	CollapseSort    string         `protobuf:"bytes,28,opt,name=collapseSort,proto3" json:"collapseSort,omitempty"`
	Peek            string         `protobuf:"bytes,29,opt,name=peek,proto3" json:"peek,omitempty"`
	SortAsc         bool           `protobuf:"varint,30,opt,name=sortAsc,proto3" json:"sortAsc,omitempty"`
	Tree            *TreeQuery     `protobuf:"bytes,31,opt,name=tree,proto3" json:"tree,omitempty"`
	CalculatedTotal int64          `protobuf:"varint,32,opt,name=calculatedTotal,proto3" json:"calculatedTotal,omitempty"`
	SessionID       string         `protobuf:"bytes,33,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{5}
}

func (x *SearchRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchRequest) GetResponseFormatType() ResponseFormatType {
	if x != nil {
		return x.ResponseFormatType
	}
	return ResponseFormatType_JSON
}

func (x *SearchRequest) GetResponseSize() int32 {
	if x != nil {
		return x.ResponseSize
	}
	return 0
}

func (x *SearchRequest) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *SearchRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchRequest) GetQueryFilter() []*QueryFilter {
	if x != nil {
		return x.QueryFilter
	}
	return nil
}

func (x *SearchRequest) GetHiddenQueryFilter() []*QueryFilter {
	if x != nil {
		return x.HiddenQueryFilter
	}
	return nil
}

func (x *SearchRequest) GetDisable() []ResponseBlockType {
	if x != nil {
		return x.Disable
	}
	return nil
}

func (x *SearchRequest) GetEnable() []ResponseBlockType {
	if x != nil {
		return x.Enable
	}
	return nil
}

func (x *SearchRequest) GetFacetField() []*FacetField {
	if x != nil {
		return x.FacetField
	}
	return nil
}

func (x *SearchRequest) GetFacetLimit() int32 {
	if x != nil {
		return x.FacetLimit
	}
	return 0
}

func (x *SearchRequest) GetFacetAndBoolType() bool {
	if x != nil {
		return x.FacetAndBoolType
	}
	return false
}

func (x *SearchRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *SearchRequest) GetLatLong() string {
	if x != nil {
		return x.LatLong
	}
	return ""
}

func (x *SearchRequest) GetDistance() string {
	if x != nil {
		return x.Distance
	}
	return ""
}

func (x *SearchRequest) GetMinX() float32 {
	if x != nil {
		return x.MinX
	}
	return 0
}

func (x *SearchRequest) GetMinY() float32 {
	if x != nil {
		return x.MinY
	}
	return 0
}

func (x *SearchRequest) GetMaxX() float32 {
	if x != nil {
		return x.MaxX
	}
	return 0
}

func (x *SearchRequest) GetMaxY() float32 {
	if x != nil {
		return x.MaxY
	}
	return 0
}

func (x *SearchRequest) GetField() []string {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *SearchRequest) GetGeoType() GeoType {
	if x != nil {
		return x.GeoType
	}
	return GeoType_BBOX
}

func (x *SearchRequest) GetQueryRefinement() string {
	if x != nil {
		return x.QueryRefinement
	}
	return ""
}

func (x *SearchRequest) GetSearchAfter() []byte {
	if x != nil {
		return x.SearchAfter
	}
	return nil
}

func (x *SearchRequest) GetItemFormat() ItemFormatType {
	if x != nil {
		return x.ItemFormat
	}
	return ItemFormatType_SUMMARY
}

func (x *SearchRequest) GetPaging() bool {
	if x != nil {
		return x.Paging
	}
	return false
}

func (x *SearchRequest) GetCollapseOn() string {
	if x != nil {
		return x.CollapseOn
	}
	return ""
}

func (x *SearchRequest) GetCollapseSize() int32 {
	if x != nil {
		return x.CollapseSize
	}
	return 0
}

func (x *SearchRequest) GetCollapseSort() string {
	if x != nil {
		return x.CollapseSort
	}
	return ""
}

func (x *SearchRequest) GetPeek() string {
	if x != nil {
		return x.Peek
	}
	return ""
}

func (x *SearchRequest) GetSortAsc() bool {
	if x != nil {
		return x.SortAsc
	}
	return false
}

func (x *SearchRequest) GetTree() *TreeQuery {
	if x != nil {
		return x.Tree
	}
	return nil
}

func (x *SearchRequest) GetCalculatedTotal() int64 {
	if x != nil {
		return x.CalculatedTotal
	}
	return 0
}

func (x *SearchRequest) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

type DetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// option: any valid identifier specified by the idType
	// description: Will output a full-view. Default idType is hubId taken from the delving_hubId field.
	Id             string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mlt            bool               `protobuf:"varint,2,opt,name=mlt,proto3" json:"mlt,omitempty"`
	Format         ResponseFormatType `protobuf:"varint,3,opt,name=format,proto3,enum=fragments.ResponseFormatType" json:"format,omitempty"`
	MltCount       int32              `protobuf:"varint,4,opt,name=mltCount,proto3" json:"mltCount,omitempty"`
	MltQueryFilter string             `protobuf:"bytes,5,opt,name=mltQueryFilter,proto3" json:"mltQueryFilter,omitempty"`
	MltFilterKey   string             `protobuf:"bytes,6,opt,name=mltFilterKey,proto3" json:"mltFilterKey,omitempty"`
	// searchRequest is a serialised form of the search result and is the return
	// to results link
	SearchRequest string `protobuf:"bytes,7,opt,name=searchRequest,proto3" json:"searchRequest,omitempty"`
	// resultIndex is the point where this detail object is in the search result order
	ResultIndex int32 `protobuf:"varint,8,opt,name=resultIndex,proto3" json:"resultIndex,omitempty"`
	// converter for result fields
	Converter string `protobuf:"bytes,9,opt,name=converter,proto3" json:"converter,omitempty"`
	// the type of id used in the ?id field
	IdType IdType `protobuf:"varint,10,opt,name=idType,proto3,enum=fragments.IdType" json:"idType,omitempty"`
}

func (x *DetailRequest) Reset() {
	*x = DetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailRequest) ProtoMessage() {}

func (x *DetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailRequest.ProtoReflect.Descriptor instead.
func (*DetailRequest) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{6}
}

func (x *DetailRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DetailRequest) GetMlt() bool {
	if x != nil {
		return x.Mlt
	}
	return false
}

func (x *DetailRequest) GetFormat() ResponseFormatType {
	if x != nil {
		return x.Format
	}
	return ResponseFormatType_JSON
}

func (x *DetailRequest) GetMltCount() int32 {
	if x != nil {
		return x.MltCount
	}
	return 0
}

func (x *DetailRequest) GetMltQueryFilter() string {
	if x != nil {
		return x.MltQueryFilter
	}
	return ""
}

func (x *DetailRequest) GetMltFilterKey() string {
	if x != nil {
		return x.MltFilterKey
	}
	return ""
}

func (x *DetailRequest) GetSearchRequest() string {
	if x != nil {
		return x.SearchRequest
	}
	return ""
}

func (x *DetailRequest) GetResultIndex() int32 {
	if x != nil {
		return x.ResultIndex
	}
	return 0
}

func (x *DetailRequest) GetConverter() string {
	if x != nil {
		return x.Converter
	}
	return ""
}

func (x *DetailRequest) GetIdType() IdType {
	if x != nil {
		return x.IdType
	}
	return IdType_HUDID
}

type BreadCrumb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Href           string `protobuf:"bytes,1,opt,name=href,proto3" json:"href,omitempty"`
	Display        string `protobuf:"bytes,2,opt,name=display,proto3" json:"display,omitempty"`
	Field          string `protobuf:"bytes,3,opt,name=field,proto3" json:"field,omitempty"`
	LocalisedField string `protobuf:"bytes,4,opt,name=localised_field,json=localisedField,proto3" json:"localised_field,omitempty"`
	Value          string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	IsLast         bool   `protobuf:"varint,6,opt,name=is_last,json=isLast,proto3" json:"is_last,omitempty"`
}

func (x *BreadCrumb) Reset() {
	*x = BreadCrumb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreadCrumb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreadCrumb) ProtoMessage() {}

func (x *BreadCrumb) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreadCrumb.ProtoReflect.Descriptor instead.
func (*BreadCrumb) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{7}
}

func (x *BreadCrumb) GetHref() string {
	if x != nil {
		return x.Href
	}
	return ""
}

func (x *BreadCrumb) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *BreadCrumb) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *BreadCrumb) GetLocalisedField() string {
	if x != nil {
		return x.LocalisedField
	}
	return ""
}

func (x *BreadCrumb) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *BreadCrumb) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

type PaginationLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start      int32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	IsLinked   bool  `protobuf:"varint,2,opt,name=isLinked,proto3" json:"isLinked,omitempty"`
	PageNumber int32 `protobuf:"varint,3,opt,name=pageNumber,proto3" json:"pageNumber,omitempty"`
}

func (x *PaginationLink) Reset() {
	*x = PaginationLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationLink) ProtoMessage() {}

func (x *PaginationLink) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationLink.ProtoReflect.Descriptor instead.
func (*PaginationLink) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{8}
}

func (x *PaginationLink) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *PaginationLink) GetIsLinked() bool {
	if x != nil {
		return x.IsLinked
	}
	return false
}

func (x *PaginationLink) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type FragmentPager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstPage    []byte `protobuf:"bytes,1,opt,name=firstPage,proto3" json:"firstPage,omitempty"`
	PreviousPage []byte `protobuf:"bytes,2,opt,name=previousPage,proto3" json:"previousPage,omitempty"`
	CurrentPage  []byte `protobuf:"bytes,3,opt,name=currentPage,proto3" json:"currentPage,omitempty"`
	NextPage     []byte `protobuf:"bytes,4,opt,name=nextPage,proto3" json:"nextPage,omitempty"`
}

func (x *FragmentPager) Reset() {
	*x = FragmentPager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FragmentPager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragmentPager) ProtoMessage() {}

func (x *FragmentPager) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragmentPager.ProtoReflect.Descriptor instead.
func (*FragmentPager) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{9}
}

func (x *FragmentPager) GetFirstPage() []byte {
	if x != nil {
		return x.FirstPage
	}
	return nil
}

func (x *FragmentPager) GetPreviousPage() []byte {
	if x != nil {
		return x.PreviousPage
	}
	return nil
}

func (x *FragmentPager) GetCurrentPage() []byte {
	if x != nil {
		return x.CurrentPage
	}
	return nil
}

func (x *FragmentPager) GetNextPage() []byte {
	if x != nil {
		return x.NextPage
	}
	return nil
}

type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start        int32             `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	Rows         int32             `protobuf:"varint,2,opt,name=rows,proto3" json:"rows,omitempty"`
	NumFound     int32             `protobuf:"varint,3,opt,name=numFound,proto3" json:"numFound,omitempty"`
	HasNext      bool              `protobuf:"varint,4,opt,name=hasNext,proto3" json:"hasNext,omitempty"`
	NextPage     int32             `protobuf:"varint,5,opt,name=nextPage,proto3" json:"nextPage,omitempty"`
	HasPrevious  bool              `protobuf:"varint,6,opt,name=hasPrevious,proto3" json:"hasPrevious,omitempty"`
	PreviousPage int32             `protobuf:"varint,7,opt,name=previousPage,proto3" json:"previousPage,omitempty"`
	CurrentPage  int32             `protobuf:"varint,8,opt,name=currentPage,proto3" json:"currentPage,omitempty"`
	Links        []*PaginationLink `protobuf:"bytes,9,rep,name=links,proto3" json:"links,omitempty"`
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{10}
}

func (x *Pagination) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Pagination) GetRows() int32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *Pagination) GetNumFound() int32 {
	if x != nil {
		return x.NumFound
	}
	return 0
}

func (x *Pagination) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

func (x *Pagination) GetNextPage() int32 {
	if x != nil {
		return x.NextPage
	}
	return 0
}

func (x *Pagination) GetHasPrevious() bool {
	if x != nil {
		return x.HasPrevious
	}
	return false
}

func (x *Pagination) GetPreviousPage() int32 {
	if x != nil {
		return x.PreviousPage
	}
	return 0
}

func (x *Pagination) GetCurrentPage() int32 {
	if x != nil {
		return x.CurrentPage
	}
	return 0
}

func (x *Pagination) GetLinks() []*PaginationLink {
	if x != nil {
		return x.Links
	}
	return nil
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Numfound    int32         `protobuf:"varint,1,opt,name=numfound,proto3" json:"numfound,omitempty"`
	Terms       string        `protobuf:"bytes,2,opt,name=terms,proto3" json:"terms,omitempty"`
	BreadCrumbs []*BreadCrumb `protobuf:"bytes,3,rep,name=breadCrumbs,proto3" json:"breadCrumbs,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{11}
}

func (x *Query) GetNumfound() int32 {
	if x != nil {
		return x.Numfound
	}
	return 0
}

func (x *Query) GetTerms() string {
	if x != nil {
		return x.Terms
	}
	return ""
}

func (x *Query) GetBreadCrumbs() []*BreadCrumb {
	if x != nil {
		return x.BreadCrumbs
	}
	return nil
}

type Facet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IsSelected  bool        `protobuf:"varint,2,opt,name=isSelected,proto3" json:"isSelected,omitempty"`
	I18N        string      `protobuf:"bytes,3,opt,name=i18n,proto3" json:"i18n,omitempty"`
	Total       int32       `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	MissingDocs int32       `protobuf:"varint,5,opt,name=missingDocs,proto3" json:"missingDocs,omitempty"`
	OtherDocs   int32       `protobuf:"varint,6,opt,name=otherDocs,proto3" json:"otherDocs,omitempty"`
	Links       []*FaceLink `protobuf:"bytes,7,rep,name=links,proto3" json:"links,omitempty"`
}

func (x *Facet) Reset() {
	*x = Facet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Facet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Facet) ProtoMessage() {}

func (x *Facet) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Facet.ProtoReflect.Descriptor instead.
func (*Facet) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{12}
}

func (x *Facet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Facet) GetIsSelected() bool {
	if x != nil {
		return x.IsSelected
	}
	return false
}

func (x *Facet) GetI18N() string {
	if x != nil {
		return x.I18N
	}
	return ""
}

func (x *Facet) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Facet) GetMissingDocs() int32 {
	if x != nil {
		return x.MissingDocs
	}
	return 0
}

func (x *Facet) GetOtherDocs() int32 {
	if x != nil {
		return x.OtherDocs
	}
	return 0
}

func (x *Facet) GetLinks() []*FaceLink {
	if x != nil {
		return x.Links
	}
	return nil
}

type FaceLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url           string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	IsSelected    bool   `protobuf:"varint,2,opt,name=isSelected,proto3" json:"isSelected,omitempty"`
	Value         string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Count         int32  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	DisplayString string `protobuf:"bytes,5,opt,name=displayString,proto3" json:"displayString,omitempty"`
}

func (x *FaceLink) Reset() {
	*x = FaceLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaceLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaceLink) ProtoMessage() {}

func (x *FaceLink) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaceLink.ProtoReflect.Descriptor instead.
func (*FaceLink) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{13}
}

func (x *FaceLink) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FaceLink) GetIsSelected() bool {
	if x != nil {
		return x.IsSelected
	}
	return false
}

func (x *FaceLink) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *FaceLink) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *FaceLink) GetDisplayString() string {
	if x != nil {
		return x.DisplayString
	}
	return ""
}

type MetadataFieldV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field []string `protobuf:"bytes,1,rep,name=field,proto3" json:"field,omitempty"`
}

func (x *MetadataFieldV1) Reset() {
	*x = MetadataFieldV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataFieldV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataFieldV1) ProtoMessage() {}

func (x *MetadataFieldV1) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataFieldV1.ProtoReflect.Descriptor instead.
func (*MetadataFieldV1) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{14}
}

func (x *MetadataFieldV1) GetField() []string {
	if x != nil {
		return x.Field
	}
	return nil
}

type MetadataItemV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DocId   string                      `protobuf:"bytes,1,opt,name=doc_id,json=docId,proto3" json:"doc_id,omitempty"`
	DocType string                      `protobuf:"bytes,2,opt,name=doc_type,json=docType,proto3" json:"doc_type,omitempty"`
	Fields  map[string]*MetadataFieldV1 `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MetadataItemV1) Reset() {
	*x = MetadataItemV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataItemV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataItemV1) ProtoMessage() {}

func (x *MetadataItemV1) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataItemV1.ProtoReflect.Descriptor instead.
func (*MetadataItemV1) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{15}
}

func (x *MetadataItemV1) GetDocId() string {
	if x != nil {
		return x.DocId
	}
	return ""
}

func (x *MetadataItemV1) GetDocType() string {
	if x != nil {
		return x.DocType
	}
	return ""
}

func (x *MetadataItemV1) GetFields() map[string]*MetadataFieldV1 {
	if x != nil {
		return x.Fields
	}
	return nil
}

type SearchResultWrapperV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *SearchResultV1 `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SearchResultWrapperV1) Reset() {
	*x = SearchResultWrapperV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResultWrapperV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResultWrapperV1) ProtoMessage() {}

func (x *SearchResultWrapperV1) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResultWrapperV1.ProtoReflect.Descriptor instead.
func (*SearchResultWrapperV1) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{16}
}

func (x *SearchResultWrapperV1) GetResult() *SearchResultV1 {
	if x != nil {
		return x.Result
	}
	return nil
}

// Full SearchResult
type SearchResultV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query      *Query            `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Pagination *Pagination       `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Items      []*MetadataItemV1 `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	Facets     []*Facet          `protobuf:"bytes,4,rep,name=facets,proto3" json:"facets,omitempty"`
}

func (x *SearchResultV1) Reset() {
	*x = SearchResultV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResultV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResultV1) ProtoMessage() {}

func (x *SearchResultV1) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResultV1.ProtoReflect.Descriptor instead.
func (*SearchResultV1) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{17}
}

func (x *SearchResultV1) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SearchResultV1) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *SearchResultV1) GetItems() []*MetadataItemV1 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SearchResultV1) GetFacets() []*Facet {
	if x != nil {
		return x.Facets
	}
	return nil
}

// The structure of the detail page
type DetailResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *MetadataItemV1 `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *DetailResult) Reset() {
	*x = DetailResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailResult) ProtoMessage() {}

func (x *DetailResult) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailResult.ProtoReflect.Descriptor instead.
func (*DetailResult) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{18}
}

func (x *DetailResult) GetItem() *MetadataItemV1 {
	if x != nil {
		return x.Item
	}
	return nil
}

type FragmentSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request   *FragmentRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	NrTriples int32            `protobuf:"varint,2,opt,name=nrTriples,proto3" json:"nrTriples,omitempty"`
	Page      int32            `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Fragments []*Fragment      `protobuf:"bytes,4,rep,name=fragments,proto3" json:"fragments,omitempty"`
}

func (x *FragmentSearchResponse) Reset() {
	*x = FragmentSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FragmentSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragmentSearchResponse) ProtoMessage() {}

func (x *FragmentSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragmentSearchResponse.ProtoReflect.Descriptor instead.
func (*FragmentSearchResponse) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{19}
}

func (x *FragmentSearchResponse) GetRequest() *FragmentRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *FragmentSearchResponse) GetNrTriples() int32 {
	if x != nil {
		return x.NrTriples
	}
	return 0
}

func (x *FragmentSearchResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FragmentSearchResponse) GetFragments() []*Fragment {
	if x != nil {
		return x.Fragments
	}
	return nil
}

type FragmentUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GraphsStored int32            `protobuf:"varint,1,opt,name=graphsStored,proto3" json:"graphsStored,omitempty"`
	Spec         string           `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	HasErrors    bool             `protobuf:"varint,3,opt,name=hasErrors,proto3" json:"hasErrors,omitempty"`
	Errors       []*FragmentError `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *FragmentUpdateResponse) Reset() {
	*x = FragmentUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FragmentUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragmentUpdateResponse) ProtoMessage() {}

func (x *FragmentUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragmentUpdateResponse.ProtoReflect.Descriptor instead.
func (*FragmentUpdateResponse) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{20}
}

func (x *FragmentUpdateResponse) GetGraphsStored() int32 {
	if x != nil {
		return x.GraphsStored
	}
	return 0
}

func (x *FragmentUpdateResponse) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

func (x *FragmentUpdateResponse) GetHasErrors() bool {
	if x != nil {
		return x.HasErrors
	}
	return false
}

func (x *FragmentUpdateResponse) GetErrors() []*FragmentError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type FragmentError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FragmentError) Reset() {
	*x = FragmentError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FragmentError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragmentError) ProtoMessage() {}

func (x *FragmentError) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragmentError.ProtoReflect.Descriptor instead.
func (*FragmentError) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{21}
}

type FragmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject      []string `protobuf:"bytes,1,rep,name=subject,proto3" json:"subject,omitempty"`
	Predicate    string   `protobuf:"bytes,2,opt,name=predicate,proto3" json:"predicate,omitempty"`
	Object       string   `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	Page         int32    `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Language     string   `protobuf:"bytes,5,opt,name=language,proto3" json:"language,omitempty"`
	OrgID        string   `protobuf:"bytes,6,opt,name=orgID,proto3" json:"orgID,omitempty"`
	Graph        string   `protobuf:"bytes,7,opt,name=graph,proto3" json:"graph,omitempty"`
	Spec         string   `protobuf:"bytes,8,opt,name=spec,proto3" json:"spec,omitempty"`
	Echo         string   `protobuf:"bytes,9,opt,name=echo,proto3" json:"echo,omitempty"`
	LodKey       string   `protobuf:"bytes,10,opt,name=lodKey,proto3" json:"lodKey,omitempty"`
	ExcludeHubID string   `protobuf:"bytes,11,opt,name=excludeHubID,proto3" json:"excludeHubID,omitempty"`
	HubID        string   `protobuf:"bytes,12,opt,name=hubID,proto3" json:"hubID,omitempty"`
}

func (x *FragmentRequest) Reset() {
	*x = FragmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FragmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragmentRequest) ProtoMessage() {}

func (x *FragmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragmentRequest.ProtoReflect.Descriptor instead.
func (*FragmentRequest) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{22}
}

func (x *FragmentRequest) GetSubject() []string {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *FragmentRequest) GetPredicate() string {
	if x != nil {
		return x.Predicate
	}
	return ""
}

func (x *FragmentRequest) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *FragmentRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FragmentRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *FragmentRequest) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *FragmentRequest) GetGraph() string {
	if x != nil {
		return x.Graph
	}
	return ""
}

func (x *FragmentRequest) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

func (x *FragmentRequest) GetEcho() string {
	if x != nil {
		return x.Echo
	}
	return ""
}

func (x *FragmentRequest) GetLodKey() string {
	if x != nil {
		return x.LodKey
	}
	return ""
}

func (x *FragmentRequest) GetExcludeHubID() string {
	if x != nil {
		return x.ExcludeHubID
	}
	return ""
}

func (x *FragmentRequest) GetHubID() string {
	if x != nil {
		return x.HubID
	}
	return ""
}

type FragmentGraphDoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta          *Header    `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	EntryURI      string     `protobuf:"bytes,2,opt,name=entryURI,proto3" json:"entryURI,omitempty"`
	NamedGraphURI string     `protobuf:"bytes,3,opt,name=namedGraphURI,proto3" json:"namedGraphURI,omitempty"`
	RecordType    RecordType `protobuf:"varint,4,opt,name=recordType,proto3,enum=fragments.RecordType" json:"recordType,omitempty"`
	//repeated Fragment fragments = 5;
	Summary   []*ResultSummary       `protobuf:"bytes,6,rep,name=summary,proto3" json:"summary,omitempty"`
	Resources []*FragmentResourceDoc `protobuf:"bytes,7,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *FragmentGraphDoc) Reset() {
	*x = FragmentGraphDoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FragmentGraphDoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragmentGraphDoc) ProtoMessage() {}

func (x *FragmentGraphDoc) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragmentGraphDoc.ProtoReflect.Descriptor instead.
func (*FragmentGraphDoc) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{23}
}

func (x *FragmentGraphDoc) GetMeta() *Header {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *FragmentGraphDoc) GetEntryURI() string {
	if x != nil {
		return x.EntryURI
	}
	return ""
}

func (x *FragmentGraphDoc) GetNamedGraphURI() string {
	if x != nil {
		return x.NamedGraphURI
	}
	return ""
}

func (x *FragmentGraphDoc) GetRecordType() RecordType {
	if x != nil {
		return x.RecordType
	}
	return RecordType_NARTHEX
}

func (x *FragmentGraphDoc) GetSummary() []*ResultSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *FragmentGraphDoc) GetResources() []*FragmentResourceDoc {
	if x != nil {
		return x.Resources
	}
	return nil
}

// FragmentReferrerContext holds the referrer in formation for creating new fragments
type FragmentReferrerContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject      string   `protobuf:"bytes,1,opt,name=Subject,proto3" json:"Subject,omitempty"`
	SubjectClass []string `protobuf:"bytes,2,rep,name=SubjectClass,proto3" json:"SubjectClass,omitempty"`
	Predicate    string   `protobuf:"bytes,3,opt,name=Predicate,proto3" json:"Predicate,omitempty"`
	SearchLabel  string   `protobuf:"bytes,4,opt,name=SearchLabel,proto3" json:"SearchLabel,omitempty"`
	Level        int32    `protobuf:"varint,5,opt,name=Level,proto3" json:"Level,omitempty"`
	ObjectID     string   `protobuf:"bytes,6,opt,name=ObjectID,proto3" json:"ObjectID,omitempty"`
	SortKey      int32    `protobuf:"varint,7,opt,name=SortKey,proto3" json:"SortKey,omitempty"`
	Label        string   `protobuf:"bytes,8,opt,name=Label,proto3" json:"Label,omitempty"`
}

func (x *FragmentReferrerContext) Reset() {
	*x = FragmentReferrerContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FragmentReferrerContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragmentReferrerContext) ProtoMessage() {}

func (x *FragmentReferrerContext) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragmentReferrerContext.ProtoReflect.Descriptor instead.
func (*FragmentReferrerContext) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{24}
}

func (x *FragmentReferrerContext) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *FragmentReferrerContext) GetSubjectClass() []string {
	if x != nil {
		return x.SubjectClass
	}
	return nil
}

func (x *FragmentReferrerContext) GetPredicate() string {
	if x != nil {
		return x.Predicate
	}
	return ""
}

func (x *FragmentReferrerContext) GetSearchLabel() string {
	if x != nil {
		return x.SearchLabel
	}
	return ""
}

func (x *FragmentReferrerContext) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *FragmentReferrerContext) GetObjectID() string {
	if x != nil {
		return x.ObjectID
	}
	return ""
}

func (x *FragmentReferrerContext) GetSortKey() int32 {
	if x != nil {
		return x.SortKey
	}
	return 0
}

func (x *FragmentReferrerContext) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type FragmentResourceDoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   string                     `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Types                []string                   `protobuf:"bytes,2,rep,name=Types,proto3" json:"Types,omitempty"`
	GraphExternalContext []*FragmentReferrerContext `protobuf:"bytes,3,rep,name=GraphExternalContext,proto3" json:"GraphExternalContext,omitempty"`
	Context              []*FragmentReferrerContext `protobuf:"bytes,4,rep,name=Context,proto3" json:"Context,omitempty"`
	Predicates           []*FragmentEntryDoc        `protobuf:"bytes,6,rep,name=Predicates,proto3" json:"Predicates,omitempty"`
	ObjectIDs            []*FragmentReferrerContext `protobuf:"bytes,7,rep,name=ObjectIDs,proto3" json:"ObjectIDs,omitempty"`
}

func (x *FragmentResourceDoc) Reset() {
	*x = FragmentResourceDoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FragmentResourceDoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragmentResourceDoc) ProtoMessage() {}

func (x *FragmentResourceDoc) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragmentResourceDoc.ProtoReflect.Descriptor instead.
func (*FragmentResourceDoc) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{25}
}

func (x *FragmentResourceDoc) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *FragmentResourceDoc) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *FragmentResourceDoc) GetGraphExternalContext() []*FragmentReferrerContext {
	if x != nil {
		return x.GraphExternalContext
	}
	return nil
}

func (x *FragmentResourceDoc) GetContext() []*FragmentReferrerContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *FragmentResourceDoc) GetPredicates() []*FragmentEntryDoc {
	if x != nil {
		return x.Predicates
	}
	return nil
}

func (x *FragmentResourceDoc) GetObjectIDs() []*FragmentReferrerContext {
	if x != nil {
		return x.ObjectIDs
	}
	return nil
}

type FragmentEntryDoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string               `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Value       string               `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	Language    string               `protobuf:"bytes,3,opt,name=Language,proto3" json:"Language,omitempty"`
	Datatype    string               `protobuf:"bytes,4,opt,name=Datatype,proto3" json:"Datatype,omitempty"`
	Entrytype   string               `protobuf:"bytes,5,opt,name=Entrytype,proto3" json:"Entrytype,omitempty"`
	Triple      string               `protobuf:"bytes,6,opt,name=Triple,proto3" json:"Triple,omitempty"`
	Inline      *FragmentResourceDoc `protobuf:"bytes,7,opt,name=Inline,proto3" json:"Inline,omitempty"`
	Predicate   string               `protobuf:"bytes,8,opt,name=Predicate,proto3" json:"Predicate,omitempty"`
	SearchLabel string               `protobuf:"bytes,9,opt,name=SearchLabel,proto3" json:"SearchLabel,omitempty"`
	Tags        []string             `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"` // Content Index
}

func (x *FragmentEntryDoc) Reset() {
	*x = FragmentEntryDoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FragmentEntryDoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FragmentEntryDoc) ProtoMessage() {}

func (x *FragmentEntryDoc) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FragmentEntryDoc.ProtoReflect.Descriptor instead.
func (*FragmentEntryDoc) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{26}
}

func (x *FragmentEntryDoc) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *FragmentEntryDoc) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *FragmentEntryDoc) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *FragmentEntryDoc) GetDatatype() string {
	if x != nil {
		return x.Datatype
	}
	return ""
}

func (x *FragmentEntryDoc) GetEntrytype() string {
	if x != nil {
		return x.Entrytype
	}
	return ""
}

func (x *FragmentEntryDoc) GetTriple() string {
	if x != nil {
		return x.Triple
	}
	return ""
}

func (x *FragmentEntryDoc) GetInline() *FragmentResourceDoc {
	if x != nil {
		return x.Inline
	}
	return nil
}

func (x *FragmentEntryDoc) GetPredicate() string {
	if x != nil {
		return x.Predicate
	}
	return ""
}

func (x *FragmentEntryDoc) GetSearchLabel() string {
	if x != nil {
		return x.SearchLabel
	}
	return ""
}

func (x *FragmentEntryDoc) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ResultSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title         string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Owner         string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	DatasetTitle  string `protobuf:"bytes,3,opt,name=datasetTitle,proto3" json:"datasetTitle,omitempty"`
	Thumbnail     string `protobuf:"bytes,4,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	LandingPage   string `protobuf:"bytes,5,opt,name=landingPage,proto3" json:"landingPage,omitempty"`
	LatLong       string `protobuf:"bytes,6,opt,name=latLong,proto3" json:"latLong,omitempty"`
	Date          string `protobuf:"bytes,7,opt,name=date,proto3" json:"date,omitempty"`
	Description   string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Subject       string `protobuf:"bytes,9,opt,name=subject,proto3" json:"subject,omitempty"`
	Collection    string `protobuf:"bytes,10,opt,name=collection,proto3" json:"collection,omitempty"`
	SubCollection string `protobuf:"bytes,11,opt,name=subCollection,proto3" json:"subCollection,omitempty"`
	ObjectID      string `protobuf:"bytes,12,opt,name=objectID,proto3" json:"objectID,omitempty"`
	ObjectType    string `protobuf:"bytes,13,opt,name=objectType,proto3" json:"objectType,omitempty"`
	Creator       string `protobuf:"bytes,14,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (x *ResultSummary) Reset() {
	*x = ResultSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultSummary) ProtoMessage() {}

func (x *ResultSummary) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultSummary.ProtoReflect.Descriptor instead.
func (*ResultSummary) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{27}
}

func (x *ResultSummary) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResultSummary) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ResultSummary) GetDatasetTitle() string {
	if x != nil {
		return x.DatasetTitle
	}
	return ""
}

func (x *ResultSummary) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *ResultSummary) GetLandingPage() string {
	if x != nil {
		return x.LandingPage
	}
	return ""
}

func (x *ResultSummary) GetLatLong() string {
	if x != nil {
		return x.LatLong
	}
	return ""
}

func (x *ResultSummary) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ResultSummary) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ResultSummary) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *ResultSummary) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *ResultSummary) GetSubCollection() string {
	if x != nil {
		return x.SubCollection
	}
	return ""
}

func (x *ResultSummary) GetObjectID() string {
	if x != nil {
		return x.ObjectID
	}
	return ""
}

func (x *ResultSummary) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *ResultSummary) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tenant identifier for this RecordType.
	OrgID string `protobuf:"bytes,1,opt,name=orgID,proto3" json:"orgID,omitempty"`
	// The spec is the unique dataset string to identify which dataset  this
	// Fragment belongs to
	Spec string `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// The revision is used to determine which version is an orphan and should be removed
	Revision int32 `protobuf:"varint,3,opt,name=revision,proto3" json:"revision,omitempty"`
	// The hubId is the unique identifier for any document record in hub3
	HubID string `protobuf:"bytes,4,opt,name=hubID,proto3" json:"hubID,omitempty"`
	// Each fragment can be tagged with additional metadata. This can be queried for.
	// Some examples are 'resource', 'literal', 'bnode', 'rdfType', etc.
	Tags []string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	// The document type for ElasticSearch. This is a constant value
	DocType string `protobuf:"bytes,6,opt,name=docType,proto3" json:"docType,omitempty"`
	// The subject of the graph stored
	EntryURI string `protobuf:"bytes,7,opt,name=entryURI,proto3" json:"entryURI,omitempty"`
	// the graph name of the graph stored
	NamedGraphURI string `protobuf:"bytes,8,opt,name=namedGraphURI,proto3" json:"namedGraphURI,omitempty"`
	// miliseconds since epoch
	Modified int64 `protobuf:"varint,9,opt,name=modified,proto3" json:"modified,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{28}
}

func (x *Header) GetOrgID() string {
	if x != nil {
		return x.OrgID
	}
	return ""
}

func (x *Header) GetSpec() string {
	if x != nil {
		return x.Spec
	}
	return ""
}

func (x *Header) GetRevision() int32 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *Header) GetHubID() string {
	if x != nil {
		return x.HubID
	}
	return ""
}

func (x *Header) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Header) GetDocType() string {
	if x != nil {
		return x.DocType
	}
	return ""
}

func (x *Header) GetEntryURI() string {
	if x != nil {
		return x.EntryURI
	}
	return ""
}

func (x *Header) GetNamedGraphURI() string {
	if x != nil {
		return x.NamedGraphURI
	}
	return ""
}

func (x *Header) GetModified() int64 {
	if x != nil {
		return x.Modified
	}
	return 0
}

// Fragment are used and stored in ElasticSearch for the Linked Data Fragments
// API
type Fragment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Generic Header for all ElasticSearch records
	Meta *Header `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// RDF core
	// URI of the Triple subject
	Subject string `protobuf:"bytes,7,opt,name=subject,proto3" json:"subject,omitempty"`
	// URI of the Triple predicate
	Predicate string `protobuf:"bytes,8,opt,name=predicate,proto3" json:"predicate,omitempty"`
	// An underscore delimited version of the namespace and the label of the URI
	// This is used in the Search DSL, for example dc:title becomes dc_title
	SearchLabel string `protobuf:"bytes,9,opt,name=searchLabel,proto3" json:"searchLabel,omitempty"`
	// The triple object. Can be both literal or resource (including Blank Nodes)
	Object string `protobuf:"bytes,10,opt,name=object,proto3" json:"object,omitempty"`
	// ISO 693 represenation of language code
	Language string `protobuf:"bytes,11,opt,name=language,proto3" json:"language,omitempty"`
	// Human readable version of the xsd:dataType
	DataType string `protobuf:"bytes,12,opt,name=dataType,proto3" json:"dataType,omitempty"`
	// The n-triples representation of the triple. Used to quickly render
	// RDF from a FragmentQuery
	Triple string `protobuf:"bytes,13,opt,name=triple,proto3" json:"triple,omitempty"`
	// the type of the object
	ObjectType string `protobuf:"bytes,14,opt,name=objectType,proto3" json:"objectType,omitempty"`
	// the relative key that is used to resolve a SPARQL describe for a Subject
	LodKey string `protobuf:"bytes,15,opt,name=lodKey,proto3" json:"lodKey,omitempty"`
	// path is used for generating statistics. It is repeated because @type, @lang
	// and @xsd:type must be added in addition to the normal fields.
	Path []string `protobuf:"bytes,16,rep,name=path,proto3" json:"path,omitempty"`
	// nestedPath is used for generating statistics with the graph path.
	// It is repeated because @type, @lang and @xsd:type must be added in addition to the normal fields.
	NestedPath []string `protobuf:"bytes,20,rep,name=nestedPath,proto3" json:"nestedPath,omitempty"`
	// order is the insert order of the source of the fragments
	Order int32 `protobuf:"varint,17,opt,name=order,proto3" json:"order,omitempty"`
	// resourceType is the RDF type of the resource
	ResourceType []string `protobuf:"bytes,18,rep,name=resourceType,proto3" json:"resourceType,omitempty"`
	// level shows the relative depth to the root RDF subject
	Level int32 `protobuf:"varint,19,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *Fragment) Reset() {
	*x = Fragment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hub3_fragments_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fragment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fragment) ProtoMessage() {}

func (x *Fragment) ProtoReflect() protoreflect.Message {
	mi := &file_hub3_fragments_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fragment.ProtoReflect.Descriptor instead.
func (*Fragment) Descriptor() ([]byte, []int) {
	return file_hub3_fragments_api_proto_rawDescGZIP(), []int{29}
}

func (x *Fragment) GetMeta() *Header {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Fragment) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Fragment) GetPredicate() string {
	if x != nil {
		return x.Predicate
	}
	return ""
}

func (x *Fragment) GetSearchLabel() string {
	if x != nil {
		return x.SearchLabel
	}
	return ""
}

func (x *Fragment) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *Fragment) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Fragment) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *Fragment) GetTriple() string {
	if x != nil {
		return x.Triple
	}
	return ""
}

func (x *Fragment) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *Fragment) GetLodKey() string {
	if x != nil {
		return x.LodKey
	}
	return ""
}

func (x *Fragment) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *Fragment) GetNestedPath() []string {
	if x != nil {
		return x.NestedPath
	}
	return nil
}

func (x *Fragment) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *Fragment) GetResourceType() []string {
	if x != nil {
		return x.ResourceType
	}
	return nil
}

func (x *Fragment) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

var File_hub3_fragments_api_proto protoreflect.FileDescriptor

var file_hub3_fragments_api_proto_rawDesc = []byte{
	0x0a, 0x18, 0x68, 0x75, 0x62, 0x33, 0x2f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x66, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x23, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x54, 0x0a, 0x12, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x22, 0xe7, 0x02, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x35, 0x0a, 0x06, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x31, 0x12, 0x35, 0x0a, 0x06, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x12, 0x20,
	0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x74, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x0a, 0x46,
	0x61, 0x63, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x73,
	0x63, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x62, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x79, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x46, 0x61, 0x63, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22,
	0xe1, 0x04, 0x0a, 0x09, 0x54, 0x72, 0x65, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x65, 0x61, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x48, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68,
	0x61, 0x73, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x10, 0x68, 0x61, 0x73, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x61, 0x73, 0x44, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61,
	0x6c, 0x6c, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x22, 0xc0, 0x09, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4d, 0x0a, 0x12, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x44, 0x0a, 0x11, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x11, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x66, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x34, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x66, 0x61, 0x63, 0x65, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x46, 0x61, 0x63, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x46, 0x61, 0x63, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x46, 0x61, 0x63, 0x65, 0x74, 0x41, 0x6e, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x46, 0x61, 0x63, 0x65, 0x74, 0x41, 0x6e,
	0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x72,
	0x74, 0x42, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x44,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x5f, 0x78,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x58, 0x12, 0x13, 0x0a, 0x05,
	0x6d, 0x69, 0x6e, 0x5f, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6d, 0x69, 0x6e,
	0x59, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x61, 0x78, 0x5f, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x04, 0x6d, 0x61, 0x78, 0x58, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x61, 0x78, 0x5f, 0x79, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x59, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x2c, 0x0a, 0x07, 0x67, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x47,
	0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x67, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x69,
	0x74, 0x65, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x4f, 0x6e, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x4f, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x53, 0x6f,
	0x72, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70,
	0x73, 0x65, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x6b, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x65, 0x65, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f,
	0x72, 0x74, 0x41, 0x73, 0x63, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x6f, 0x72,
	0x74, 0x41, 0x73, 0x63, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x72, 0x65, 0x65, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x54,
	0x72, 0x65, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0xe1, 0x02, 0x0a, 0x0d, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6d, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x66, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x6d, 0x6c, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6c, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6c, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12,
	0x29, 0x0a, 0x06, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x49, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x06, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x0a, 0x42,
	0x72, 0x65, 0x61, 0x64, 0x43, 0x72, 0x75, 0x6d, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x72, 0x65,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x72, 0x65, 0x66, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x73, 0x65,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x73, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x4c, 0x61, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x0e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x8f, 0x01, 0x0a, 0x0d, 0x46, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x22, 0xa1, 0x02, 0x0a, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x72, 0x6f, 0x77, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x2f,
	0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x22,
	0x72, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x62, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x72, 0x75, 0x6d, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x42, 0x72, 0x65, 0x61,
	0x64, 0x43, 0x72, 0x75, 0x6d, 0x62, 0x52, 0x0b, 0x62, 0x72, 0x65, 0x61, 0x64, 0x43, 0x72, 0x75,
	0x6d, 0x62, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x05, 0x46, 0x61, 0x63, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x31, 0x38, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x31, 0x38, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x08, 0x46, 0x61, 0x63, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x27, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x22, 0xd8, 0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x56, 0x31, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x6f,
	0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x31,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x1a, 0x55, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x31,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4a, 0x0a, 0x15, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x56, 0x31, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x31, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xca, 0x01, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x31, 0x12, 0x26, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65,
	0x6d, 0x56, 0x31, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x66, 0x61,
	0x63, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x74, 0x52, 0x06, 0x66, 0x61,
	0x63, 0x65, 0x74, 0x73, 0x22, 0x3d, 0x0a, 0x0c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x31, 0x52, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x22, 0xb3, 0x01, 0x0a, 0x16, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x72, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x72, 0x54, 0x72, 0x69, 0x70, 0x6c,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09,
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x16, 0x46, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09,
	0x68, 0x61, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x68, 0x61, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x0f, 0x0a, 0x0d,
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb7, 0x02,
	0x0a, 0x0f, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x65, 0x63, 0x68, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x64, 0x4b, 0x65, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a,
	0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x75, 0x62, 0x49, 0x44, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x75, 0x62, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x75, 0x62, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x68, 0x75, 0x62, 0x49, 0x44, 0x22, 0xa4, 0x02, 0x0a, 0x10, 0x46, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x6f, 0x63, 0x12, 0x25, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x55, 0x52, 0x49, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x55, 0x52, 0x49, 0x12,
	0x24, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x47, 0x72, 0x61, 0x70, 0x68, 0x55, 0x52, 0x49,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x55, 0x52, 0x49, 0x12, 0x35, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x3c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x44, 0x6f, 0x63, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xf9,
	0x01, 0x0a, 0x17, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x6f,
	0x72, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x53, 0x6f, 0x72,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xd0, 0x02, 0x0a, 0x13, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x6f, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x14, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x14, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x3c, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3b,
	0x0a, 0x0a, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x6f, 0x63, 0x52,
	0x0a, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x09, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x09, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x73, 0x22, 0xb2, 0x02,
	0x0a, 0x10, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44,
	0x6f, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x6f, 0x63, 0x52, 0x06, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x22, 0xa5, 0x03, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61,
	0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xf0, 0x01, 0x0a, 0x06, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x68,
	0x75, 0x62, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x75, 0x62, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x55, 0x52, 0x49, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x55, 0x52, 0x49, 0x12, 0x24, 0x0a, 0x0d, 0x6e,
	0x61, 0x6d, 0x65, 0x64, 0x47, 0x72, 0x61, 0x70, 0x68, 0x55, 0x52, 0x49, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x47, 0x72, 0x61, 0x70, 0x68, 0x55, 0x52,
	0x49, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0xaf, 0x03,
	0x0a, 0x08, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x72, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x72, 0x69,
	0x70, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2a,
	0x8e, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x42, 0x55, 0x46, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x58, 0x4d, 0x4c, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4a, 0x53, 0x4f, 0x4e, 0x50,
	0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x4d, 0x4c, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x47,
	0x45, 0x4f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x47,
	0x45, 0x4f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x45, 0x4f, 0x42,
	0x55, 0x46, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x44, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x08,
	0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x55, 0x4c, 0x4b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09,
	0x2a, 0x5d, 0x0a, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x47, 0x52, 0x41, 0x50, 0x48,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x4a, 0x53, 0x4f, 0x4e, 0x4c, 0x44, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x46,
	0x4c, 0x41, 0x54, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x52, 0x45, 0x45, 0x10, 0x05, 0x2a,
	0x51, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x49, 0x54, 0x45, 0x4d, 0x53, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41,
	0x43, 0x45, 0x54, 0x53, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x41, 0x59, 0x4f, 0x55, 0x54,
	0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x41, 0x47, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x04, 0x2a, 0x58, 0x0a, 0x09, 0x46, 0x61, 0x63, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x09, 0x0a, 0x05, 0x54, 0x45, 0x52, 0x4d, 0x53, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x49,
	0x53, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x49, 0x4e,
	0x4d, 0x41, 0x58, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x52, 0x45, 0x45, 0x46, 0x41, 0x43,
	0x45, 0x54, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x41, 0x47, 0x53, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x4d, 0x45, 0x54, 0x41, 0x54, 0x41, 0x47, 0x53, 0x10, 0x05, 0x2a, 0x7f, 0x0a, 0x0f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x44, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x45, 0x52, 0x41, 0x4e,
	0x47, 0x45, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x53, 0x4f, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x06, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x45, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x07, 0x12,
	0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x54, 0x41, 0x47, 0x10, 0x08, 0x2a, 0x2d, 0x0a,
	0x07, 0x47, 0x65, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x42, 0x4f, 0x58,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x45, 0x4f, 0x46, 0x49, 0x4c, 0x54, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x2d, 0x0a, 0x06,
	0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x55, 0x44, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x44, 0x43, 0x49, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4e,
	0x41, 0x4d, 0x45, 0x44, 0x47, 0x52, 0x41, 0x50, 0x48, 0x10, 0x02, 0x2a, 0x4c, 0x0a, 0x0a, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x41, 0x52,
	0x54, 0x48, 0x45, 0x58, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x4f, 0x43, 0x41, 0x42, 0x55, 0x4c, 0x41, 0x52, 0x59,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x03, 0x12, 0x09,
	0x0a, 0x05, 0x43, 0x41, 0x43, 0x48, 0x45, 0x10, 0x04, 0x42, 0x10, 0x5a, 0x0e, 0x68, 0x75, 0x62,
	0x33, 0x2f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_hub3_fragments_api_proto_rawDescOnce sync.Once
	file_hub3_fragments_api_proto_rawDescData = file_hub3_fragments_api_proto_rawDesc
)

func file_hub3_fragments_api_proto_rawDescGZIP() []byte {
	file_hub3_fragments_api_proto_rawDescOnce.Do(func() {
		file_hub3_fragments_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_hub3_fragments_api_proto_rawDescData)
	})
	return file_hub3_fragments_api_proto_rawDescData
}

var file_hub3_fragments_api_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_hub3_fragments_api_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_hub3_fragments_api_proto_goTypes = []interface{}{
	(ResponseFormatType)(0),         // 0: fragments.ResponseFormatType
	(ItemFormatType)(0),             // 1: fragments.ItemFormatType
	(ResponseBlockType)(0),          // 2: fragments.ResponseBlockType
	(FacetType)(0),                  // 3: fragments.FacetType
	(QueryFilterType)(0),            // 4: fragments.QueryFilterType
	(GeoType)(0),                    // 5: fragments.GeoType
	(IdType)(0),                     // 6: fragments.IdType
	(RecordType)(0),                 // 7: fragments.RecordType
	(*FilterValue)(nil),             // 8: fragments.FilterValue
	(*ContextQueryFilter)(nil),      // 9: fragments.ContextQueryFilter
	(*QueryFilter)(nil),             // 10: fragments.QueryFilter
	(*FacetField)(nil),              // 11: fragments.FacetField
	(*TreeQuery)(nil),               // 12: fragments.TreeQuery
	(*SearchRequest)(nil),           // 13: fragments.SearchRequest
	(*DetailRequest)(nil),           // 14: fragments.DetailRequest
	(*BreadCrumb)(nil),              // 15: fragments.BreadCrumb
	(*PaginationLink)(nil),          // 16: fragments.PaginationLink
	(*FragmentPager)(nil),           // 17: fragments.FragmentPager
	(*Pagination)(nil),              // 18: fragments.Pagination
	(*Query)(nil),                   // 19: fragments.Query
	(*Facet)(nil),                   // 20: fragments.Facet
	(*FaceLink)(nil),                // 21: fragments.FaceLink
	(*MetadataFieldV1)(nil),         // 22: fragments.MetadataFieldV1
	(*MetadataItemV1)(nil),          // 23: fragments.MetadataItemV1
	(*SearchResultWrapperV1)(nil),   // 24: fragments.SearchResultWrapperV1
	(*SearchResultV1)(nil),          // 25: fragments.SearchResultV1
	(*DetailResult)(nil),            // 26: fragments.DetailResult
	(*FragmentSearchResponse)(nil),  // 27: fragments.FragmentSearchResponse
	(*FragmentUpdateResponse)(nil),  // 28: fragments.FragmentUpdateResponse
	(*FragmentError)(nil),           // 29: fragments.FragmentError
	(*FragmentRequest)(nil),         // 30: fragments.FragmentRequest
	(*FragmentGraphDoc)(nil),        // 31: fragments.FragmentGraphDoc
	(*FragmentReferrerContext)(nil), // 32: fragments.FragmentReferrerContext
	(*FragmentResourceDoc)(nil),     // 33: fragments.FragmentResourceDoc
	(*FragmentEntryDoc)(nil),        // 34: fragments.FragmentEntryDoc
	(*ResultSummary)(nil),           // 35: fragments.ResultSummary
	(*Header)(nil),                  // 36: fragments.Header
	(*Fragment)(nil),                // 37: fragments.Fragment
	nil,                             // 38: fragments.MetadataItemV1.FieldsEntry
}
var file_hub3_fragments_api_proto_depIdxs = []int32{
	9,  // 0: fragments.QueryFilter.Level1:type_name -> fragments.ContextQueryFilter
	9,  // 1: fragments.QueryFilter.Level2:type_name -> fragments.ContextQueryFilter
	4,  // 2: fragments.QueryFilter.type:type_name -> fragments.QueryFilterType
	3,  // 3: fragments.FacetField.type:type_name -> fragments.FacetType
	0,  // 4: fragments.SearchRequest.responseFormatType:type_name -> fragments.ResponseFormatType
	10, // 5: fragments.SearchRequest.QueryFilter:type_name -> fragments.QueryFilter
	10, // 6: fragments.SearchRequest.HiddenQueryFilter:type_name -> fragments.QueryFilter
	2,  // 7: fragments.SearchRequest.disable:type_name -> fragments.ResponseBlockType
	2,  // 8: fragments.SearchRequest.enable:type_name -> fragments.ResponseBlockType
	11, // 9: fragments.SearchRequest.facetField:type_name -> fragments.FacetField
	5,  // 10: fragments.SearchRequest.geoType:type_name -> fragments.GeoType
	1,  // 11: fragments.SearchRequest.itemFormat:type_name -> fragments.ItemFormatType
	12, // 12: fragments.SearchRequest.tree:type_name -> fragments.TreeQuery
	0,  // 13: fragments.DetailRequest.format:type_name -> fragments.ResponseFormatType
	6,  // 14: fragments.DetailRequest.idType:type_name -> fragments.IdType
	16, // 15: fragments.Pagination.links:type_name -> fragments.PaginationLink
	15, // 16: fragments.Query.breadCrumbs:type_name -> fragments.BreadCrumb
	21, // 17: fragments.Facet.links:type_name -> fragments.FaceLink
	38, // 18: fragments.MetadataItemV1.fields:type_name -> fragments.MetadataItemV1.FieldsEntry
	25, // 19: fragments.SearchResultWrapperV1.result:type_name -> fragments.SearchResultV1
	19, // 20: fragments.SearchResultV1.query:type_name -> fragments.Query
	18, // 21: fragments.SearchResultV1.pagination:type_name -> fragments.Pagination
	23, // 22: fragments.SearchResultV1.items:type_name -> fragments.MetadataItemV1
	20, // 23: fragments.SearchResultV1.facets:type_name -> fragments.Facet
	23, // 24: fragments.DetailResult.item:type_name -> fragments.MetadataItemV1
	30, // 25: fragments.FragmentSearchResponse.request:type_name -> fragments.FragmentRequest
	37, // 26: fragments.FragmentSearchResponse.fragments:type_name -> fragments.Fragment
	29, // 27: fragments.FragmentUpdateResponse.errors:type_name -> fragments.FragmentError
	36, // 28: fragments.FragmentGraphDoc.meta:type_name -> fragments.Header
	7,  // 29: fragments.FragmentGraphDoc.recordType:type_name -> fragments.RecordType
	35, // 30: fragments.FragmentGraphDoc.summary:type_name -> fragments.ResultSummary
	33, // 31: fragments.FragmentGraphDoc.resources:type_name -> fragments.FragmentResourceDoc
	32, // 32: fragments.FragmentResourceDoc.GraphExternalContext:type_name -> fragments.FragmentReferrerContext
	32, // 33: fragments.FragmentResourceDoc.Context:type_name -> fragments.FragmentReferrerContext
	34, // 34: fragments.FragmentResourceDoc.Predicates:type_name -> fragments.FragmentEntryDoc
	32, // 35: fragments.FragmentResourceDoc.ObjectIDs:type_name -> fragments.FragmentReferrerContext
	33, // 36: fragments.FragmentEntryDoc.Inline:type_name -> fragments.FragmentResourceDoc
	36, // 37: fragments.Fragment.meta:type_name -> fragments.Header
	22, // 38: fragments.MetadataItemV1.FieldsEntry.value:type_name -> fragments.MetadataFieldV1
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_hub3_fragments_api_proto_init() }
func file_hub3_fragments_api_proto_init() {
	if File_hub3_fragments_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hub3_fragments_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextQueryFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacetField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreadCrumb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FragmentPager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Facet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaceLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataFieldV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataItemV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResultWrapperV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResultV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FragmentSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FragmentUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FragmentError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FragmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FragmentGraphDoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FragmentReferrerContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FragmentResourceDoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FragmentEntryDoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hub3_fragments_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fragment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hub3_fragments_api_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hub3_fragments_api_proto_goTypes,
		DependencyIndexes: file_hub3_fragments_api_proto_depIdxs,
		EnumInfos:         file_hub3_fragments_api_proto_enumTypes,
		MessageInfos:      file_hub3_fragments_api_proto_msgTypes,
	}.Build()
	File_hub3_fragments_api_proto = out.File
	file_hub3_fragments_api_proto_rawDesc = nil
	file_hub3_fragments_api_proto_goTypes = nil
	file_hub3_fragments_api_proto_depIdxs = nil
}
