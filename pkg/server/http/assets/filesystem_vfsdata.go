// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// FileSystem statically implements the virtual filesystem provided to vfsgen.
var FileSystem = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 3, 24, 13, 30, 31, 256157412, time.UTC),
		},
		"/README.md": &vfsgen۰CompressedFileInfo{
			name:             "README.md",
			modTime:          time.Date(2019, 3, 24, 13, 36, 24, 280488563, time.UTC),
			uncompressedSize: 433,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x3f\xaf\xda\x40\x10\xc4\x7b\x7f\x8a\x91\xd2\x00\x42\x50\xa4\xa3\x43\xb1\xa2\x14\x28\xa4\xa0\x89\x10\xc5\xfa\x6e\xed\x5b\x71\xdc\x91\xdd\x3b\x13\x7f\xfb\x27\x3f\xa8\x90\x5e\x35\xc5\xfc\xe6\xcf\x37\x9c\x82\xa8\xc7\x1f\xd2\x32\xe1\x20\x9d\x35\xcd\x29\x88\xe1\x4e\xee\x4a\x03\xc3\xe5\x54\x48\x92\xc1\x72\x55\xc7\xe8\xb3\x42\x39\x79\x56\x49\x03\x1e\xdc\xcd\x00\xa7\xb2\xc1\x3e\x46\x94\xc0\xc6\xe8\x25\xb2\x81\x94\x21\xc9\xc5\xea\xd9\x43\xd2\xec\x61\xe0\xc4\x4a\x85\x3d\x3a\x49\xa4\x13\xc8\x40\x18\x45\x4b\xa5\xf8\xcc\x4d\x56\xf8\x86\x6a\x73\xfd\x62\xec\x6d\xe0\xb4\x3c\x0f\x52\x42\xed\x36\x2e\xdf\xb6\x16\xaa\xba\x9c\x0f\xdb\xa7\x77\x41\x94\x4e\x49\xa7\x0d\x7e\x54\x55\x4e\x25\x4e\xeb\xcf\xad\x3e\xc7\x98\x1f\x73\xcd\x93\x90\xb7\x4f\xbb\xa6\x59\xe1\x20\xe9\xca\x1e\x2d\x15\xc2\x4f\xa5\xe1\xc6\xa9\x18\x46\xe1\x07\xeb\x1a\xc6\x8c\x45\x94\x74\x5d\x9e\x2f\xcd\x0a\x7f\xc9\x86\x2a\xb0\x3b\xe9\xbf\xf8\x15\xd4\xd6\xe2\x02\x7e\x53\x91\x9c\x28\x62\xaf\x2e\xc8\xc8\x2f\xa5\x08\xfe\x7f\x8f\x59\xf9\x2d\xd7\x9c\x8e\xed\x71\x07\xf2\x1e\x2d\xc7\x71\x7e\xfd\xab\x76\xdf\xd1\x92\x85\x2e\x93\xfa\xd7\x5c\xf3\x11\x00\x00\xff\xff\x99\xe1\x88\x7b\xb1\x01\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/README.md"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
